{"version":3,"sources":["actions/actionTypeKeys.ts","reducer.ts","components/IconItem.tsx","components/UserSummary.tsx","components/RepositoriesSummary.tsx","components/RepositoryView.tsx","components/RepositoryList.tsx","components/Summary.tsx","services/api.js","components/App.tsx","index.tsx"],"names":["ActionTypeKeys","initialState","user","login","name","bio","location","company","blog","email","avatarUrl","htmlUrl","publicRepos","publicGists","followers","following","reposUrl","repositories","language_statistics","stars_statistics","IconItem","props","icon","text","link","react_default","a","createElement","Fragment","icon_icon","href","target","rel","UserSummary","card","id","elevation","Elevation","TWO","src","alt","components_IconItem","IconNames","MAP_MARKER","OFFICE","ENVELOPE","LINK","tag","GIT_BRANCH","DOCUMENT","USER","RepositoriesSummary","languageStatistics","starsStatistics","callout","intent","Intent","PRIMARY","PIE_CHART","language_count","total_stars","repository_count","className","react_vis_es","data","languages","map","language","angle","count","label","reverse","showLabels","colorDomain","width","height","orientation","items","title","concat","max_stars_repo","html_url","stargazers_count","average_stars","median_stars","RepositoryView","repository","fork","GIT_REPO","CODE","description","STAR","EYE_OPEN","watchers_count","forks","sortRepositories","sorting","sort","r1","r2","toLowerCase","RepositoryList","_useState","useState","_useState2","Object","slicedToArray","viewMode","setViewMode","_useState3","_useState4","setSorting","length","buttonGroup","buttons","onClick","SORT_DESC","SORT_ALPHABETICAL","TH","GRID_VIEW","index","components_RepositoryView","key","htmlTable","bordered","striped","Summary","useSelector","state","components_UserSummary","components_RepositoriesSummary","components_RepositoryList","nonIdealState","DISABLE","api","getUser","_getUser","asyncToGenerator","regenerator_default","mark","_callee","userName","wrap","_context","prev","next","axios","get","sent","abrupt","stop","_x","apply","this","arguments","getUserRepositories","url","page","roundStarsStat","stars","Math","round","calculateMeanStars","repoCount","calculateMedianStars","sortedRepos","repoMedian","floor","ceil","App","dispatch","useDispatch","setUserName","popoverVisible","setPopoverVisible","handleSearch","then","result","type","SET_USER","avatar_url","public_repos","public_gists","repos_url","numberOfRepos","promises","push","Promise","all","values","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","value","toConsumableArray","err","return","processLoadedRepos","catch","setInterval","maxStars","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","find","_iterator2","unknownLanguage","language1","language2","SET_STATISTICS","SET_REPOSITORIES","inputButtons","tooltip","content","minimal","WARNING","navbar","Group","align","Alignment","LEFT","Heading","RIGHT","popover","position","PopoverPosition","BOTTOM","isOpen","inputGroup","placeholder","rightElement","onChange","event","onKeyPress","charCode","ERROR","DANGER","style","float","color","Colors","RED1","Divider","components_Summary","FocusStyleManager","onlyShowFocusOnTabs","store","createStore","action","objectSpread","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"2HAAYA,6NCIZ,IAAMC,EAAe,CACnBC,KAAM,CACJC,MAAO,GACPC,KAAM,GACNC,IAAK,GACLC,SAAU,GACVC,QAAS,GACTC,KAAM,GACNC,MAAO,GACPC,UAAW,GACXC,QAAS,GACTC,YAAa,EACbC,YAAa,EACbC,UAAW,EACXC,UAAW,EACXC,SAAU,IAEZC,aAAc,GACdC,oBAAqB,KACrBC,iBAAkB,wJCALC,MAdf,SAAkBC,GAAsB,IAChCC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,KAClB,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMP,KAAMA,IACVE,GACAC,EAAAC,EAAAC,cAAA,KAAGG,KAAMN,EAAMO,OAAO,SAASC,IAAI,uBAChCT,IAECE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAAGL,KCsBAU,MA9Bf,SAAqBZ,GAAyB,IACtCnB,EAASmB,EAATnB,KACN,OACEuB,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAG,eAAeC,UAAWC,IAAUC,KAC3Cb,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,UACNV,EAAAC,EAAAC,cAAA,OAAKY,IAAKrC,EAAKQ,UAAW8B,IAAI,wBAEhCf,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,SAAIzB,EAAKE,MADX,SAEEqB,EAAAC,EAAAC,cAAA,KAAGG,KAAM5B,EAAKS,QAASoB,OAAO,SAASC,IAAI,uBACxC9B,EAAKC,QAGVsB,EAAAC,EAAAC,cAAA,SAAIzB,EAAKG,KACToB,EAAAC,EAAAC,cAAA,SACGzB,EAAKI,UAAYmB,EAAAC,EAAAC,cAACc,EAAD,CAAUnB,KAAMoB,IAAUC,WAAYpB,KAAMrB,EAAKI,WAClEJ,EAAKK,SAAWkB,EAAAC,EAAAC,cAACc,EAAD,CAAUnB,KAAMoB,IAAUE,OAAQrB,KAAMrB,EAAKK,UAC7DL,EAAKO,OAASgB,EAAAC,EAAAC,cAACc,EAAD,CAAUnB,KAAMoB,IAAUG,SAAUtB,KAAMrB,EAAKO,QAC/C,KAAdP,EAAKM,MAAeiB,EAAAC,EAAAC,cAACc,EAAD,CAAUnB,KAAMoB,IAAUI,KAAMvB,KAAMrB,EAAKM,KAAMgB,KAAMtB,EAAKM,QAEnFiB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAKzB,KAAMoB,IAAUM,YAArB,iBAAgD9C,EAAKU,aACrDa,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAKzB,KAAMoB,IAAUO,UAArB,UAAuC/C,EAAKW,aAC5CY,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAKzB,KAAMoB,IAAUQ,MAArB,cAAuChD,EAAKY,WAC5CW,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAKzB,KAAMoB,IAAUQ,MAArB,cAAuChD,EAAKa,+BCqBrCoC,MA3Cf,SAA6B9B,GAAiC,IACtD+B,EAAwC/B,EAAxC+B,mBAAoBC,EAAoBhC,EAApBgC,gBAC1B,OACE5B,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAG,uBAAuBC,UAAWC,IAAUC,KACnDb,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAASC,OAAQC,IAAOC,QAASnC,KAAMoB,IAAUgB,WAC9CN,EAAmBO,eADtB,uBAC0DN,EAAgBO,YAD1E,cACkG,IAC/FR,EAAmBS,iBAFtB,kBAIApC,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,qBACbrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CACEC,KAAMZ,EAAmBa,UACtBC,IAAI,SAAAC,GACH,MAAO,CAAEC,MAAOD,EAASE,MAAOC,MAAOH,EAAS/D,QAEjDmE,UACHC,YAAY,EACZC,YAAa,CAAC,EAAG,EAAG,GACpBC,MAAO,IACPC,OAAQ,MAEVlD,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CACEa,YAAY,aACZC,MAAOzB,EAAmBa,UAAUC,IAAI,SAAAC,GACtC,MAAO,CAAEW,MAAK,GAAAC,OAAKZ,EAAS/D,KAAd,MAAA2E,OAAuBZ,EAASE,UAEhDK,MAAO,MAETjD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACa,IACXF,EAAAC,EAAAC,cAAA,KAAGG,KAAMuB,EAAgB2B,eAAeC,SAAUlD,OAAO,SAASC,IAAI,uBACnEqB,EAAgB2B,eAAe5E,MAC7B,IAJP,IAKIiD,EAAgB2B,eAAeE,iBALnC,KAOAzD,EAAAC,EAAAC,cAAA,2BAAmB0B,EAAgB8B,eACnC1D,EAAAC,EAAAC,cAAA,0BAAkB0B,EAAgB+B,oCCX7BC,MA5Bf,SAAwBhE,GAAuB,IACrCiE,EAAejE,EAAfiE,WACR,OACE7D,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,cACbrC,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,qBACbrC,EAAAC,EAAAC,cAACc,EAAD,CACEnB,KAAMgE,EAAWC,KAAO7C,IAAUM,WAAaN,IAAU8C,SACzDjE,KAAM+D,EAAWlF,KACjBoB,KAAM8D,EAAWL,WAElBK,EAAWnB,UACV1C,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,kBACbrC,EAAAC,EAAAC,cAACc,EAAD,CAAUnB,KAAMoB,IAAU+C,KAAMlE,KAAM+D,EAAWnB,aAIvD1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAI2D,EAAWI,cAEjBjE,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,qBACbrC,EAAAC,EAAAC,cAACc,EAAD,CAAUnB,KAAMoB,IAAUiD,KAAMpE,KAAM+D,EAAWJ,mBACjDzD,EAAAC,EAAAC,cAACc,EAAD,CAAUnB,KAAMoB,IAAUkD,SAAUrE,KAAM+D,EAAWO,iBACrDpE,EAAAC,EAAAC,cAACc,EAAD,CAAUnB,KAAMoB,IAAUM,WAAYzB,KAAM+D,EAAWQ,WCrBzDC,EAAmB,SAAC9E,EAA4B+E,GACpD,MAAgB,iBAAZA,EACK/E,EAAagF,KAAK,SAACC,EAAIC,GAAL,OACvBD,EAAG9F,KAAKgG,cAAgBD,EAAG/F,KAAKgG,eAAiB,EAAIF,EAAG9F,KAAKgG,cAAgBD,EAAG/F,KAAKgG,cAAgB,EAAI,IAGpGnF,EAAagF,KAAK,SAACC,EAAIC,GAAL,OAAYA,EAAGjB,iBAAmBgB,EAAGhB,oBAiFnDmB,MA7Ef,SAAwBhF,GAA4B,IAC5CJ,EAAiBI,EAAjBJ,aAD4CqF,EAElBC,mBAAS,SAFSC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAE3CK,EAF2CH,EAAA,GAEjCI,EAFiCJ,EAAA,GAAAK,EAGpBN,mBAAS,gBAHWO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAG3Cb,EAH2Cc,EAAA,GAGlCC,EAHkCD,EAAA,GAgBlD,OAFA7F,EAAe8E,EAAiB9E,EAAc+E,GAG5CvE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACGX,EAAa+F,OAAS,GACrBvF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAG,kBAAkBC,UAAWC,IAAUC,KAC9Cb,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,0BACNV,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,4BACNV,EAAAC,EAAAC,cAACsF,EAAA,EAAD,KACExF,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CACE3F,KAAkB,iBAAZyE,EAA6B,gBAAkB,sBACrDmB,QAhBM,WAEpBJ,EAD+B,iBAAZf,EAA6B,QAAU,iBAgB5C1E,KAAkB,iBAAZ0E,EAA6BtD,IAAU0E,UAAY1E,IAAU2E,oBAErE5F,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CACE3F,KAAmB,UAAboF,EAAuB,aAAe,aAC5CQ,QAzBO,WACrBP,EAAyB,UAAbD,EAAuB,QAAU,UAyB/BrF,KAAmB,UAAbqF,EAAuBjE,IAAU4E,GAAK5E,IAAU6E,cAI5D9F,EAAAC,EAAAC,cAAA,2BAEFF,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,2BACQ,UAAbwE,EACC1F,EAAaiD,IAAI,SAACoB,EAAYkC,GAAb,OAAuB/F,EAAAC,EAAAC,cAAC8F,EAAD,CAAgBnC,WAAYA,EAAYoC,IAAKF,MAErF/F,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAWC,UAAU,EAAMC,SAAS,GAClCpG,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,sBAGJF,EAAAC,EAAAC,cAAA,aACGV,EAAaiD,IAAI,SAACoB,EAAYkC,GAAb,OAChB/F,EAAAC,EAAAC,cAAA,MAAI+F,IAAKF,GACP/F,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGG,KAAMwD,EAAWL,SAAUlD,OAAO,SAASC,IAAI,uBAC/CsD,EAAWlF,OAGhBqB,EAAAC,EAAAC,cAAA,UAAK2D,EAAWI,aAChBjE,EAAAC,EAAAC,cAAA,UAAK2D,EAAWnB,UAChB1C,EAAAC,EAAAC,cAAA,UAAK2D,EAAWJ,kBAChBzD,EAAAC,EAAAC,cAAA,UAAK2D,EAAWO,gBAChBpE,EAAAC,EAAAC,cAAA,UAAK2D,EAAWQ,yBCzCvBgC,MAlCf,WACE,IAAM5H,EAAO6H,YAAY,SAACC,GAAD,OAAqBA,EAAM9H,OAC9Ce,EAAe8G,YAAY,SAACC,GAAD,OAAqBA,EAAM/G,eACtDmC,EAAqB2E,YAAY,SAACC,GAAD,OAAqBA,EAAM9G,sBAC5DmC,EAAkB0E,YAAY,SAACC,GAAD,OAAqBA,EAAM7G,mBAC/D,OACEM,EAAAC,EAAAC,cAAA,QAAMmC,UAAU,YACE,KAAf5D,EAAKC,MACJsB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsG,EAAD,CAAa/H,KAAMA,IACM,IAAxBe,EAAa+F,OACZvF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuG,EAAD,CAAqB9E,mBAAoBA,EAAoBC,gBAAiBA,IAC9E5B,EAAAC,EAAAC,cAACwG,EAAD,CAAgBlH,aAAcA,KAGhCQ,EAAAC,EAAAC,cAACyG,EAAA,EAAD,CACE9G,KAAMoB,IAAU2F,QAChBvD,MAAM,mBACNY,YAAY,0CAKlBjE,EAAAC,EAAAC,cAACyG,EAAA,EAAD,CACE9G,KAAMoB,IAAU2F,QAChBvD,MAAM,oBACNY,YAAY,kGClCP4C,EAAA,CACbC,QAAO,eAAAC,EAAA/B,OAAAgC,EAAA,EAAAhC,CAAAiC,EAAAhH,EAAAiH,KAAE,SAAAC,EAAMC,GAAN,IAAA3I,EAAA,OAAAwI,EAAAhH,EAAAoH,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,IAAMC,IAAN,gCAAApE,OAA0C8D,IADpD,cACH3I,EADG6I,EAAAK,KAAAL,EAAAM,OAAA,SAEAnJ,EAAK8D,MAFL,wBAAA+E,EAAAO,SAAAV,MAAF,gBAAAW,GAAA,OAAAf,EAAAgB,MAAAC,KAAAC,YAAA,GAKPC,oBAAqB,SAACC,EAAKC,GACzB,OAAOX,IAAMC,IAAN,GAAApE,OAAa6E,EAAb,UAAA7E,OAAyB8E,EAAzB,oBCeLC,EAAiB,SAACC,GAAD,OAAmBC,KAAKC,MAAc,GAARF,GAAc,IAE7DG,EAAqB,SAACH,EAAeI,GAAhB,OAAsCL,EAAeC,EAAQI,IAElFC,EAAuB,SAACnJ,GAC5B,IAAMoJ,EAAcpJ,EAAagF,KAAK,SAACC,EAAIC,GAAL,OAAYA,EAAGjB,iBAAmBgB,EAAGhB,mBACrEoF,EAAaD,EAAYrD,OAAS,EACxC,OAAIqD,EAAYrD,OAAS,IAAM,EACtB8C,GACJO,EAAYL,KAAKO,MAAMD,IAAapF,iBAAmBmF,EAAYL,KAAKQ,KAAKF,IAAapF,kBAAoB,GAG1GmF,EAAYC,GAAYpF,kBAqKpBuF,MAjKf,WACE,IAAMC,EAAWC,cADJrE,EAEmBC,mBAAS,IAF5BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAENuC,EAFMrC,EAAA,GAEIoE,EAFJpE,EAAA,GAAAK,EAG+BN,oBAAS,GAHxCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGNgE,EAHM/D,EAAA,GAGUgE,EAHVhE,EAAA,GAKPiE,EAAe,WACF,KAAblC,GACFP,EACGC,QAAQM,GACRmC,KAAK,SAAAC,GACJP,EAAS,CACPQ,KAAMlL,EAAemL,SACrBjL,KAAM,CACJC,MAAO8K,EAAO9K,MACdC,KAAM6K,EAAO7K,KACbC,IAAK4K,EAAO5K,IACZC,SAAU2K,EAAO3K,SACjBC,QAAS0K,EAAO1K,QAChBC,KAAMyK,EAAOzK,KACbC,MAAOwK,EAAOxK,MACdC,UAAWuK,EAAOG,WAClBzK,QAASsK,EAAOhG,SAChBrE,YAAaqK,EAAOI,aACpBxK,YAAaoK,EAAOK,aACpBxK,UAAWmK,EAAOnK,UAClBC,UAAWkK,EAAOlK,UAClBC,SAAUiK,EAAOM,aAMrB,IAHA,IAAIC,EAAgBP,EAAOI,aACvBxB,EAAO,EACP4B,EAAqB,GAClBD,EAAgB,GACrBC,EAASC,KAAKpD,EAAIqB,oBAAoBsB,EAAOM,UAAW1B,IACxD2B,GAAiB,IACjB3B,IAEF8B,QAAQC,IAAIH,GAAUT,KAAK,SAACa,GAC1B,IAAI5K,EAA6B,GADW6K,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAE5C,QAAAC,EAAAC,EAAkBN,EAAlBO,OAAAC,cAAAP,GAAAI,EAAAC,EAAAlD,QAAAqD,MAAAR,GAAA,EAA0B,KAAjBS,EAAiBL,EAAAK,MACxBtL,EAAayK,KAAblC,MAAAvI,EAAYwF,OAAA+F,EAAA,EAAA/F,CAAS8F,EAAMvI,QAHe,MAAAyI,GAAAV,GAAA,EAAAC,EAAAS,EAAA,YAAAX,GAAA,MAAAK,EAAAO,QAAAP,EAAAO,SAAA,WAAAX,EAAA,MAAAC,GAK5CW,EAAmB1L,OAGtB2L,MAAM,WACL9B,GAAkB,GAClB+B,YAAY,kBAAM/B,GAAkB,IAAQ,QAK9C6B,EAAqB,SAAC1L,GAC1B,IAAMgD,EAAwB,GACxBZ,EAAmC,CACvC2B,eAAgB,KAChBpB,YAAa,EACbuB,cAAe,EACfC,aAAc,GAIZ0H,EAAW,EAV0CC,GAAA,EAAAC,GAAA,EAAAC,OAAAhB,EAAA,IAWzD,IAXyD,IAWzDiB,EAXyDC,EAAA,eAWhD7H,EAXgD4H,EAAAX,MAajDpI,EAAWF,EAAUmJ,KAAK,SAAAjJ,GAAQ,OAAIA,EAAS/D,OAASkF,EAAWnB,gBACxD8H,IAAb9H,EACFF,EAAUyH,KAAK,CACbtL,KAAMkF,EAAWnB,SACjBE,MAAO,IAGTF,EAASE,QAIXhB,EAAgBO,aAAe0B,EAAWJ,iBACtCI,EAAWJ,iBAAmB4H,IAChCzJ,EAAgB2B,eAAiBM,EACjCwH,EAAWxH,EAAWJ,mBAhB1BmI,EAAuBpM,EAAvBmL,OAAAC,cAAAU,GAAAG,EAAAG,EAAApE,QAAAqD,MAAAS,GAAA,EAAqCI,IAXoB,MAAAV,GAAAO,GAAA,EAAAC,EAAAR,EAAA,YAAAM,GAAA,MAAAM,EAAAX,QAAAW,EAAAX,SAAA,WAAAM,EAAA,MAAAC,GAgCzD5J,EAAgB8B,cAAgB+E,EAAmB7G,EAAgBO,YAAa3C,EAAa+F,QAC7F3D,EAAgB+B,aAAegF,EAAqBnJ,GAGpD,IAAMqM,EAAkBrJ,EAAUmJ,KAAK,SAAAjJ,GAAQ,OAAsB,OAAlBA,EAAS/D,YACpC6L,IAApBqB,IACFA,EAAgBlN,KAAO,WAIzB6D,EAAUgC,KAAK,SAACsH,EAAWC,GAAZ,OAA0BA,EAAUnJ,MAAQkJ,EAAUlJ,QAGrEqG,EAAS,CACPQ,KAAMlL,EAAeyN,eACrBrK,mBAAoB,CAAEa,YAAWN,eAAgBM,EAAU+C,OAAQnD,iBAAkB5C,EAAa+F,QAClG3D,gBAAiBA,IAEnBqH,EAAS,CACPQ,KAAMlL,EAAe0N,iBACrBzM,aAAcA,KAIZ0M,EACJlM,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACiM,EAAA,EAAD,CAASC,QAAQ,UACfpM,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAQ5F,KAAK,SAASiC,OAAQC,IAAOC,QAASqK,SAAS,EAAM3G,QAAS4D,KAExEtJ,EAAAC,EAAAC,cAACiM,EAAA,EAAD,CAASC,QAAQ,SACfpM,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAQ5F,KAAK,QAAQiC,OAAQC,IAAOuK,QAASD,SAAS,EAAM3G,QAAS,kBAAMyD,EAAY,SAK7F,OACEnJ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACqM,EAAA,EAAD,KACEvM,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,YACbrC,EAAAC,EAAAC,cAACqM,EAAA,EAAOC,MAAR,CAAcC,MAAOC,IAAUC,MAC7B3M,EAAAC,EAAAC,cAACqM,EAAA,EAAOK,QAAR,6BAEF5M,EAAAC,EAAAC,cAACqM,EAAA,EAAOC,MAAR,CAAcC,MAAOC,IAAUG,OAC7B7M,EAAAC,EAAAC,cAAC4M,EAAA,EAAD,CAASC,SAAUC,IAAgBC,OAAQC,OAAQ9D,GACjDpJ,EAAAC,EAAAC,cAACiN,EAAA,EAAD,CACEC,YAAY,mBACZC,aAAcnB,EACdpB,MAAO1D,EACPkG,SAAU,SAACC,GAAD,OAA4BpE,EAAYoE,EAAMjN,OAAOwK,QAC/D0C,WAAY,SAAAD,GACa,KAAnBA,EAAME,UACRnE,OAINtJ,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMP,KAAMoB,IAAUyM,MAAO5L,OAAQC,IAAO4L,OAAQC,MAAO,CAAEC,MAAO,UACpE7N,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,QAAM0N,MAAO,CAAEE,MAAOC,IAAOC,OAAS5G,GAD7C,0BAKJpH,EAAAC,EAAAC,cAACqM,EAAA,EAAO0B,QAAR,MACAjO,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CACE5F,KAAK,WACLC,KAAK,SACLO,KAAK,gDACLC,OAAO,cAKfN,EAAAC,EAAAC,cAACgO,EAAD,eCpLNC,IAAkBC,sBAGlB,IAAMC,EAAQC,YTOC,WAAsE,IAArD/H,EAAqD0B,UAAA1C,OAAA,QAAAiF,IAAAvC,UAAA,GAAAA,UAAA,GAAnCzJ,EAAc+P,EAAqBtG,UAAA1C,OAAA,EAAA0C,UAAA,QAAAuC,EACnF,OAAQ+D,EAAO9E,MACb,KAAKlL,EAAemL,SAClB,OAAO1E,OAAAwJ,EAAA,EAAAxJ,CAAA,GACFuB,EADL,CAEE9H,KAAM8P,EAAO9P,OAEjB,KAAKF,EAAe0N,iBAClB,OAAOjH,OAAAwJ,EAAA,EAAAxJ,CAAA,GACFuB,EADL,CAEE/G,aAAc+O,EAAO/O,eAEzB,KAAKjB,EAAeyN,eAClB,OAAOhH,OAAAwJ,EAAA,EAAAxJ,CAAA,GACFuB,EADL,CAEE9G,oBAAqB8O,EAAO5M,mBAC5BjC,iBAAkB6O,EAAO3M,kBAE7B,QACE,OAAO2E,KSvBbkI,IAASC,OACP1O,EAAAC,EAAAC,cAACyO,EAAA,EAAD,CAAUN,MAAOA,GACfrO,EAAAC,EAAAC,cAAC0O,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.3ad37fe7.chunk.js","sourcesContent":["export enum ActionTypeKeys {\r\n    SET_USER = \"SET_USER\",\r\n    SET_REPOSITORIES = \"SET_REPOSITORIES\",\r\n    SET_STATISTICS = \"SET_STATISTICS\",\r\n    OTHER_ACTION = \"__any_other_action_type__\"\r\n}","import { ActionTypes } from './actions/actionTypes';\r\nimport { ActionTypeKeys } from './actions/actionTypeKeys';\r\nimport { AppState } from './models/AppState';\r\n\r\nconst initialState = {\r\n  user: {\r\n    login: '',\r\n    name: '',\r\n    bio: '',\r\n    location: '',\r\n    company: '',\r\n    blog: '',\r\n    email: '',\r\n    avatarUrl: '',\r\n    htmlUrl: '',\r\n    publicRepos: 0,\r\n    publicGists: 0,\r\n    followers: 0,\r\n    following: 0,\r\n    reposUrl: '',\r\n  },\r\n  repositories: [],\r\n  language_statistics: null,\r\n  stars_statistics: null,\r\n};\r\n\r\nexport default function reducer(state: AppState = initialState, action: ActionTypes) {\r\n  switch (action.type) {\r\n    case ActionTypeKeys.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n    case ActionTypeKeys.SET_REPOSITORIES:\r\n      return {\r\n        ...state,\r\n        repositories: action.repositories,\r\n      };\r\n    case ActionTypeKeys.SET_STATISTICS:\r\n      return {\r\n        ...state,\r\n        language_statistics: action.languageStatistics,\r\n        stars_statistics: action.starsStatistics,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Icon, IconName } from '@blueprintjs/core';\r\n\r\ninterface IconItemProps {\r\n  icon: IconName;\r\n  text: string | number;\r\n  link?: string;\r\n}\r\n\r\nfunction IconItem(props: IconItemProps) {\r\n  let { icon, text, link } = props;\r\n  return (\r\n    <>\r\n      <Icon icon={icon} />\r\n      {(link && (\r\n        <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {text}\r\n        </a>\r\n      )) || <>{text}</>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default IconItem;\r\n","import React from 'react';\r\nimport { Card, Elevation, Tag } from '@blueprintjs/core';\r\nimport { User } from '../models/User';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport IconItem from './IconItem';\r\n\r\ninterface UserSummaryProps {\r\n  user: User;\r\n}\r\n\r\nfunction UserSummary(props: UserSummaryProps) {\r\n  let { user } = props;\r\n  return (\r\n    <Card id=\"user-summary\" elevation={Elevation.TWO}>\r\n      <div id=\"avatar\">\r\n        <img src={user.avatarUrl} alt=\"Github user avatar\" />\r\n      </div>\r\n      <p>\r\n        <b>{user.name}</b> /&nbsp;\r\n        <a href={user.htmlUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {user.login}\r\n        </a>\r\n      </p>\r\n      <p>{user.bio}</p>\r\n      <p>\r\n        {user.location && <IconItem icon={IconNames.MAP_MARKER} text={user.location} />}\r\n        {user.company && <IconItem icon={IconNames.OFFICE} text={user.company} />}\r\n        {user.email && <IconItem icon={IconNames.ENVELOPE} text={user.email} />}\r\n        {user.blog !== '' && <IconItem icon={IconNames.LINK} text={user.blog} link={user.blog} />}\r\n      </p>\r\n      <div>\r\n        <Tag icon={IconNames.GIT_BRANCH}>Repositories: {user.publicRepos}</Tag>\r\n        <Tag icon={IconNames.DOCUMENT}>Gists: {user.publicGists}</Tag>\r\n        <Tag icon={IconNames.USER}>Followers: {user.followers}</Tag>\r\n        <Tag icon={IconNames.USER}>Following: {user.following}</Tag>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default UserSummary;\r\n","import React from 'react';\r\nimport { RadialChart, DiscreteColorLegend } from 'react-vis';\r\nimport { Card, Elevation, Callout, Intent } from '@blueprintjs/core';\r\nimport { LanguageStatistics } from '../models/LanguageStatistics';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { StarsStatistics } from '../models/StarsStatistics';\r\n\r\ninterface RepositoriesSummaryProps {\r\n  languageStatistics: LanguageStatistics;\r\n  starsStatistics: StarsStatistics;\r\n}\r\n\r\nfunction RepositoriesSummary(props: RepositoriesSummaryProps) {\r\n  let { languageStatistics, starsStatistics } = props;\r\n  return (\r\n    <Card id=\"repositories-summary\" elevation={Elevation.TWO}>\r\n      <Callout intent={Intent.PRIMARY} icon={IconNames.PIE_CHART}>\r\n        {languageStatistics.language_count} languages used and {starsStatistics.total_stars} stars over{' '}\r\n        {languageStatistics.repository_count} repositories.\r\n      </Callout>\r\n      <div className=\"flex-card-section\">\r\n        <RadialChart\r\n          data={languageStatistics.languages\r\n            .map(language => {\r\n              return { angle: language.count, label: language.name };\r\n            })\r\n            .reverse()}\r\n          showLabels={true}\r\n          colorDomain={[0, 1, 2]}\r\n          width={300}\r\n          height={300}\r\n        />\r\n        <DiscreteColorLegend\r\n          orientation=\"horizontal\"\r\n          items={languageStatistics.languages.map(language => {\r\n            return { title: `${language.name}: ${language.count}` };\r\n          })}\r\n          width={150}\r\n        />\r\n        <div>\r\n          <p>\r\n            Max stars:{' '}\r\n            <a href={starsStatistics.max_stars_repo.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              {starsStatistics.max_stars_repo.name}\r\n            </a>{' '}\r\n            ({starsStatistics.max_stars_repo.stargazers_count})\r\n          </p>\r\n          <p>Average stars: {starsStatistics.average_stars}</p>\r\n          <p>Median stars: {starsStatistics.median_stars}</p>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default RepositoriesSummary;\r\n","import React from 'react';\r\nimport { Repository } from '../models/Repository';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport IconItem from './IconItem';\r\n\r\ninterface RepositoryView {\r\n  repository: Repository;\r\n}\r\n\r\nfunction RepositoryView(props: RepositoryView) {\r\n  const { repository } = props;\r\n  return (\r\n    <div className=\"repository\">\r\n      <div className=\"repository-header\">\r\n        <IconItem\r\n          icon={repository.fork ? IconNames.GIT_BRANCH : IconNames.GIT_REPO}\r\n          text={repository.name}\r\n          link={repository.html_url}\r\n        />\r\n        {repository.language && (\r\n          <div className=\"repository-tag\">\r\n            <IconItem icon={IconNames.CODE} text={repository.language} />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <i>{repository.description}</i>\r\n      </div>\r\n      <div className=\"repository-footer\">\r\n        <IconItem icon={IconNames.STAR} text={repository.stargazers_count} />\r\n        <IconItem icon={IconNames.EYE_OPEN} text={repository.watchers_count} />\r\n        <IconItem icon={IconNames.GIT_BRANCH} text={repository.forks} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RepositoryView;\r\n","import React, { useState } from 'react';\r\nimport { Card, Elevation, Button, HTMLTable, ButtonGroup } from '@blueprintjs/core';\r\nimport { Repository } from '../models/Repository';\r\nimport RepositoryView from './RepositoryView';\r\nimport { IconNames } from '@blueprintjs/icons';\r\n\r\ninterface RepositoryListProps {\r\n  repositories: Repository[];\r\n}\r\n\r\nconst sortRepositories = (repositories: Repository[], sorting: string) => {\r\n  if (sorting === 'alphabetical') {\r\n    return repositories.sort((r1, r2) =>\r\n      r1.name.toLowerCase() < r2.name.toLowerCase() ? -1 : r1.name.toLowerCase() > r2.name.toLowerCase() ? 1 : 0,\r\n    );\r\n  } else {\r\n    return repositories.sort((r1, r2) => r2.stargazers_count - r1.stargazers_count);\r\n  }\r\n};\r\n\r\nfunction RepositoryList(props: RepositoryListProps) {\r\n  let { repositories } = props;\r\n  const [viewMode, setViewMode] = useState('tiles');\r\n  const [sorting, setSorting] = useState('alphabetical');\r\n\r\n  const toggleViewMode = () => {\r\n    setViewMode(viewMode === 'tiles' ? 'table' : 'tiles');\r\n  };\r\n\r\n  const toggleSorting = () => {\r\n    const newSorting = sorting === 'alphabetical' ? 'stars' : 'alphabetical';\r\n    setSorting(newSorting);\r\n  };\r\n\r\n  repositories = sortRepositories(repositories, sorting);\r\n\r\n  return (\r\n    <>\r\n      {repositories.length > 0 && (\r\n        <Card id=\"repository-list\" elevation={Elevation.TWO}>\r\n          <div id=\"repository-list-header\">\r\n            <div id=\"repository-list-controls\">\r\n              <ButtonGroup>\r\n                <Button\r\n                  text={sorting === 'alphabetical' ? 'Sort by stars' : 'Sort alphabetically'}\r\n                  onClick={toggleSorting}\r\n                  icon={sorting === 'alphabetical' ? IconNames.SORT_DESC : IconNames.SORT_ALPHABETICAL}\r\n                />\r\n                <Button\r\n                  text={viewMode === 'tiles' ? 'View table' : 'View tiles'}\r\n                  onClick={toggleViewMode}\r\n                  icon={viewMode === 'tiles' ? IconNames.TH : IconNames.GRID_VIEW}\r\n                />\r\n              </ButtonGroup>\r\n            </div>\r\n            <h2>Repositories</h2>\r\n          </div>\r\n          <div id=\"repository-list-content\">\r\n            {viewMode === 'tiles' ? (\r\n              repositories.map((repository, index) => <RepositoryView repository={repository} key={index} />)\r\n            ) : (\r\n              <HTMLTable bordered={true} striped={true}>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Repository</th>\r\n                    <th>Description</th>\r\n                    <th>Language</th>\r\n                    <th>Stars</th>\r\n                    <th>Watchers</th>\r\n                    <th>Forked</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {repositories.map((repository, index) => (\r\n                    <tr key={index}>\r\n                      <td>\r\n                        <a href={repository.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                          {repository.name}\r\n                        </a>\r\n                      </td>\r\n                      <td>{repository.description}</td>\r\n                      <td>{repository.language}</td>\r\n                      <td>{repository.stargazers_count}</td>\r\n                      <td>{repository.watchers_count}</td>\r\n                      <td>{repository.forks}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </HTMLTable>\r\n            )}\r\n          </div>\r\n        </Card>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RepositoryList;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../models/AppState';\r\nimport UserSummary from './UserSummary';\r\nimport RepositoriesSummary from './RepositoriesSummary';\r\nimport RepositoryList from './RepositoryList';\r\nimport { NonIdealState } from '@blueprintjs/core';\r\nimport { IconNames } from '@blueprintjs/icons';\r\n\r\nfunction Summary() {\r\n  const user = useSelector((state: AppState) => state.user);\r\n  const repositories = useSelector((state: AppState) => state.repositories);\r\n  const languageStatistics = useSelector((state: AppState) => state.language_statistics);\r\n  const starsStatistics = useSelector((state: AppState) => state.stars_statistics);\r\n  return (\r\n    <main className=\"viewport\">\r\n      {user.login !== '' ? (\r\n        <div>\r\n          <UserSummary user={user} />\r\n          {repositories.length !== 0 ? (\r\n            <div>\r\n              <RepositoriesSummary languageStatistics={languageStatistics} starsStatistics={starsStatistics} />\r\n              <RepositoryList repositories={repositories} />\r\n            </div>\r\n          ) : (\r\n            <NonIdealState\r\n              icon={IconNames.DISABLE}\r\n              title=\"No repositories.\"\r\n              description=\"The user has no public repositories.\"\r\n            />\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <NonIdealState\r\n          icon={IconNames.DISABLE}\r\n          title=\"No user selected.\"\r\n          description=\"Enter a Github user name in the search bar above!\"\r\n        />\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Summary;\r\n","import axios from 'axios';\r\n\r\nexport default {\r\n  getUser: async userName => {\r\n    let user = await axios.get(`https://api.github.com/users/${userName}`);\r\n    return user.data;\r\n  },\r\n\r\n  getUserRepositories: (url, page) => {\r\n    return axios.get(`${url}?page=${page}&per_page=100`);\r\n  },\r\n};\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Alignment,\r\n  Button,\r\n  AnchorButton,\r\n  Navbar,\r\n  Intent,\r\n  Tooltip,\r\n  InputGroup,\r\n  Popover,\r\n  PopoverPosition,\r\n  Card,\r\n  Icon,\r\n  Colors,\r\n} from '@blueprintjs/core';\r\nimport Summary from './Summary';\r\nimport api from '../services/api';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ActionTypeKeys } from '../actions/actionTypeKeys';\r\nimport { Repository } from '../models/Repository';\r\nimport { Language } from '../models/Language';\r\nimport { StarsStatistics } from '../models/StarsStatistics';\r\n\r\nconst roundStarsStat = (stars: number) => Math.round(stars * 10) / 10;\r\n\r\nconst calculateMeanStars = (stars: number, repoCount: number) => roundStarsStat(stars / repoCount);\r\n\r\nconst calculateMedianStars = (repositories: Repository[]) => {\r\n  const sortedRepos = repositories.sort((r1, r2) => r2.stargazers_count - r1.stargazers_count);\r\n  const repoMedian = sortedRepos.length / 2;\r\n  if (sortedRepos.length % 2 === 1) {\r\n    return roundStarsStat(\r\n      (sortedRepos[Math.floor(repoMedian)].stargazers_count + sortedRepos[Math.ceil(repoMedian)].stargazers_count) / 2,\r\n    );\r\n  } else {\r\n    return sortedRepos[repoMedian].stargazers_count;\r\n  }\r\n};\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const [userName, setUserName] = useState('');\r\n  const [popoverVisible, setPopoverVisible] = useState(false);\r\n\r\n  const handleSearch = () => {\r\n    if (userName !== '') {\r\n      api\r\n        .getUser(userName)\r\n        .then(result => {\r\n          dispatch({\r\n            type: ActionTypeKeys.SET_USER,\r\n            user: {\r\n              login: result.login,\r\n              name: result.name,\r\n              bio: result.bio,\r\n              location: result.location,\r\n              company: result.company,\r\n              blog: result.blog,\r\n              email: result.email,\r\n              avatarUrl: result.avatar_url,\r\n              htmlUrl: result.html_url,\r\n              publicRepos: result.public_repos,\r\n              publicGists: result.public_gists,\r\n              followers: result.followers,\r\n              following: result.following,\r\n              reposUrl: result.repos_url,\r\n            },\r\n          });\r\n          let numberOfRepos = result.public_repos;\r\n          let page = 1;\r\n          let promises: object[] = [];\r\n          while (numberOfRepos > 0) {\r\n            promises.push(api.getUserRepositories(result.repos_url, page));\r\n            numberOfRepos -= 100;\r\n            page++;\r\n          }\r\n          Promise.all(promises).then((values: any[]) => {\r\n            let repositories: Repository[] = [];\r\n            for (let value of values) {\r\n              repositories.push(...value.data);\r\n            }\r\n            processLoadedRepos(repositories);\r\n          });\r\n        })\r\n        .catch(() => {\r\n          setPopoverVisible(true);\r\n          setInterval(() => setPopoverVisible(false), 2000);\r\n        });\r\n    }\r\n  };\r\n\r\n  const processLoadedRepos = (repositories: Repository[]) => {\r\n    const languages: Language[] = [];\r\n    const starsStatistics: StarsStatistics = {\r\n      max_stars_repo: null,\r\n      total_stars: 0,\r\n      average_stars: 0,\r\n      median_stars: 0,\r\n    };\r\n\r\n    // Compute repositories stats\r\n    let maxStars = 0;\r\n    for (let repository of repositories) {\r\n      // Find unique languages and count the number of repos for each\r\n      const language = languages.find(language => language.name === repository.language);\r\n      if (language === undefined) {\r\n        languages.push({\r\n          name: repository.language,\r\n          count: 1,\r\n        });\r\n      } else {\r\n        language.count++;\r\n      }\r\n\r\n      // Find repo with most stars and count total stars\r\n      starsStatistics.total_stars += repository.stargazers_count;\r\n      if (repository.stargazers_count > maxStars) {\r\n        starsStatistics.max_stars_repo = repository;\r\n        maxStars = repository.stargazers_count;\r\n      }\r\n    }\r\n\r\n    // Calculate average and median stars\r\n    starsStatistics.average_stars = calculateMeanStars(starsStatistics.total_stars, repositories.length);\r\n    starsStatistics.median_stars = calculateMedianStars(repositories);\r\n\r\n    // Handle the `null` language\r\n    const unknownLanguage = languages.find(language => language.name === null);\r\n    if (unknownLanguage !== undefined) {\r\n      unknownLanguage.name = 'Unknown';\r\n    }\r\n\r\n    // Sort by most used language\r\n    languages.sort((language1, language2) => language2.count - language1.count);\r\n\r\n    // Dispatch full repo list and language stats\r\n    dispatch({\r\n      type: ActionTypeKeys.SET_STATISTICS,\r\n      languageStatistics: { languages, language_count: languages.length, repository_count: repositories.length },\r\n      starsStatistics: starsStatistics,\r\n    });\r\n    dispatch({\r\n      type: ActionTypeKeys.SET_REPOSITORIES,\r\n      repositories: repositories,\r\n    });\r\n  };\r\n\r\n  const inputButtons = (\r\n    <>\r\n      <Tooltip content=\"Search\">\r\n        <Button icon=\"search\" intent={Intent.PRIMARY} minimal={true} onClick={handleSearch} />\r\n      </Tooltip>\r\n      <Tooltip content=\"Clear\">\r\n        <Button icon=\"cross\" intent={Intent.WARNING} minimal={true} onClick={() => setUserName('')} />\r\n      </Tooltip>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Navbar>\r\n        <div className=\"viewport\">\r\n          <Navbar.Group align={Alignment.LEFT}>\r\n            <Navbar.Heading>Github Repo Summary</Navbar.Heading>\r\n          </Navbar.Group>\r\n          <Navbar.Group align={Alignment.RIGHT}>\r\n            <Popover position={PopoverPosition.BOTTOM} isOpen={popoverVisible}>\r\n              <InputGroup\r\n                placeholder=\"Github user name\"\r\n                rightElement={inputButtons}\r\n                value={userName}\r\n                onChange={(event: { target: any }) => setUserName(event.target.value)}\r\n                onKeyPress={event => {\r\n                  if (event.charCode === 13) {\r\n                    handleSearch();\r\n                  }\r\n                }}\r\n              />\r\n              <Card>\r\n                <Icon icon={IconNames.ERROR} intent={Intent.DANGER} style={{ float: 'left' }} />\r\n                <p>\r\n                  User <span style={{ color: Colors.RED1 }}>{userName}</span> could not be found!\r\n                </p>\r\n              </Card>\r\n            </Popover>\r\n            <Navbar.Divider />\r\n            <AnchorButton\r\n              icon=\"git-repo\"\r\n              text=\"Github\"\r\n              href=\"https://github.com/alex-c/github-repo-summary\"\r\n              target=\"_blank\"\r\n            />\r\n          </Navbar.Group>\r\n        </div>\r\n      </Navbar>\r\n      <Summary />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Import Redux\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducer';\n\n// Import Blueprint\nimport { FocusStyleManager } from '@blueprintjs/core';\n\n// Set up App\nimport App from './components/App';\nimport './index.scss';\n\n// Set up Blueprint\nFocusStyleManager.onlyShowFocusOnTabs();\n\n// Set up store\nconst store = createStore(rootReducer);\n\n// Render!\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}