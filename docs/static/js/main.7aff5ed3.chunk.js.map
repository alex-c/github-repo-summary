{"version":3,"sources":["actions/actionTypeKeys.ts","constants/Sorting.ts","reducer.ts","components/IconItem.tsx","components/UserSummary.tsx","components/RepositoriesSummary.tsx","components/repostory_list/RepositoryView.tsx","actions/helpers/sortRepositories.ts","actions/actionCreators.ts","components/repostory_list/helpers.ts","components/repostory_list/SortingOption.tsx","components/repostory_list/SortingOptions.tsx","components/repostory_list/RepositoryList.tsx","components/Summary.tsx","services/api.js","components/App.tsx","index.tsx"],"names":["ActionTypeKeys","Sorting","initialState","user","login","name","bio","location","company","blog","email","avatarUrl","htmlUrl","publicRepos","publicGists","followers","following","reposUrl","repositories","sorting","Alphabetical","language_statistics","stars_statistics","IconItem","props","icon","text","link","react_default","a","createElement","Fragment","icon_icon","href","target","rel","UserSummary","card","id","elevation","Elevation","TWO","src","alt","components_IconItem","IconNames","MAP_MARKER","OFFICE","ENVELOPE","LINK","tag","GIT_BRANCH","DOCUMENT","USER","RepositoriesSummary","languageStatistics","starsStatistics","callout","intent","Intent","PRIMARY","PIE_CHART","language_count","total_stars","repository_count","className","react_vis_es","data","languages","map","language","angle","count","label","reverse","showLabels","colorDomain","width","height","orientation","items","title","concat","max_stars_repo","html_url","stargazers_count","average_stars","median_stars","RepositoryView","repository","fork","GIT_REPO","CODE","description","STAR","forks","open_issues","ISSUE","tooltip","content","updated_at","boundary","position","Position","TOP","UPDATED","Date","toLocaleDateString","sortRepositories","sort","r1","r2","toLowerCase","ByStars","ByUpdateDate","changeSorting","dispatch","getState","type","SET_SORTING","SET_REPOSITORIES","loadRepositories","sortingDisplayText","sortingIconName","SORT_ALPHABETICAL","SORT_NUMERICAL_DESC","SORT_DESC","SortingOption","handler","menuItem","onClick","SortingOptions","menu","repostory_list_SortingOption","RepositoryList","useDispatch","_useState","useState","_useState2","Object","slicedToArray","viewMode","setViewMode","length","buttonGroup","popover","repostory_list_SortingOptions","BOTTOM","buttons","rightIcon","CARET_DOWN","TH","GRID_VIEW","index","repostory_list_RepositoryView","key","htmlTable","bordered","striped","Summary","useSelector","state","components_UserSummary","components_RepositoriesSummary","repostory_list_RepositoryList","nonIdealState","DISABLE","api","getUser","_getUser","asyncToGenerator","regenerator_default","mark","_callee","userName","wrap","_context","prev","next","axios","get","sent","abrupt","stop","_x","apply","this","arguments","getUserRepositories","url","page","roundStarsStat","stars","Math","round","calculateMeanStars","repoCount","calculateMedianStars","sortedRepos","slice","repoMedian","floor","ceil","App","setUserName","_useState3","_useState4","popoverVisible","setPopoverVisible","handleSearch","then","result","SET_USER","avatar_url","public_repos","public_gists","repos_url","numberOfRepos","promises","push","Promise","all","values","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","value","toConsumableArray","err","return","processLoadedRepos","catch","setInterval","maxStars","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","find","_iterator2","unknownLanguage","language1","language2","SET_STATISTICS","inputButtons","minimal","WARNING","navbar","Group","align","Alignment","LEFT","Heading","RIGHT","PopoverPosition","isOpen","inputGroup","placeholder","rightElement","onChange","event","onKeyPress","charCode","ERROR","DANGER","style","float","color","Colors","RED1","Divider","components_Summary","FocusStyleManager","onlyShowFocusOnTabs","store","createStore","action","objectSpread","applyMiddleware","thunk","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.7aff5ed3.chunk.js","sourcesContent":["export enum ActionTypeKeys {\r\n    SET_USER = \"SET_USER\",\r\n    SET_REPOSITORIES = \"SET_REPOSITORIES\",\r\n    SET_STATISTICS = \"SET_STATISTICS\",\r\n    SET_SORTING = \"SET_SORTING\",\r\n    OTHER_ACTION = \"__any_other_action_type__\"\r\n}","export enum Sorting {\r\n  Alphabetical,\r\n  ByStars,\r\n  ByUpdateDate\r\n}","import { ActionTypes } from './actions/actionTypes';\r\nimport { ActionTypeKeys } from './actions/actionTypeKeys';\r\nimport { AppState } from './models/AppState';\r\nimport { Sorting } from './constants/Sorting';\r\n\r\nconst initialState = {\r\n  user: {\r\n    login: '',\r\n    name: '',\r\n    bio: '',\r\n    location: '',\r\n    company: '',\r\n    blog: '',\r\n    email: '',\r\n    avatarUrl: '',\r\n    htmlUrl: '',\r\n    publicRepos: 0,\r\n    publicGists: 0,\r\n    followers: 0,\r\n    following: 0,\r\n    reposUrl: '',\r\n  },\r\n  repositories: [],\r\n  sorting: Sorting.Alphabetical,\r\n  language_statistics: null,\r\n  stars_statistics: null,\r\n};\r\n\r\nexport default function reducer(state: AppState = initialState, action: ActionTypes) {\r\n  switch (action.type) {\r\n    case ActionTypeKeys.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n    case ActionTypeKeys.SET_REPOSITORIES:\r\n      return {\r\n        ...state,\r\n        repositories: action.repositories,\r\n      };\r\n    case ActionTypeKeys.SET_STATISTICS:\r\n      return {\r\n        ...state,\r\n        language_statistics: action.languageStatistics,\r\n        stars_statistics: action.starsStatistics,\r\n      };\r\n    case ActionTypeKeys.SET_SORTING:\r\n      return {\r\n        ...state,\r\n        sorting: action.sorting,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Icon, IconName } from '@blueprintjs/core';\r\n\r\ninterface IconItemProps {\r\n  icon: IconName;\r\n  text: string | number;\r\n  link?: string;\r\n}\r\n\r\nfunction IconItem(props: IconItemProps) {\r\n  let { icon, text, link } = props;\r\n  return (\r\n    <>\r\n      <Icon icon={icon} />\r\n      {(link && (\r\n        <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {text}\r\n        </a>\r\n      )) || <>{text}</>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default IconItem;\r\n","import React from 'react';\r\nimport { Card, Elevation, Tag } from '@blueprintjs/core';\r\nimport { User } from '../models/User';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport IconItem from './IconItem';\r\n\r\ninterface UserSummaryProps {\r\n  user: User;\r\n}\r\n\r\nfunction UserSummary(props: UserSummaryProps) {\r\n  let { user } = props;\r\n  return (\r\n    <Card id=\"user-summary\" elevation={Elevation.TWO}>\r\n      <div id=\"avatar\">\r\n        <img src={user.avatarUrl} alt=\"Github user avatar\" />\r\n      </div>\r\n      <p>\r\n        <b>{user.name}</b> /&nbsp;\r\n        <a href={user.htmlUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {user.login}\r\n        </a>\r\n      </p>\r\n      <p>{user.bio}</p>\r\n      <p>\r\n        {user.location && <IconItem icon={IconNames.MAP_MARKER} text={user.location} />}\r\n        {user.company && <IconItem icon={IconNames.OFFICE} text={user.company} />}\r\n        {user.email && <IconItem icon={IconNames.ENVELOPE} text={user.email} />}\r\n        {user.blog !== '' && <IconItem icon={IconNames.LINK} text={user.blog} link={user.blog} />}\r\n      </p>\r\n      <div>\r\n        <Tag icon={IconNames.GIT_BRANCH}>Repositories: {user.publicRepos}</Tag>\r\n        <Tag icon={IconNames.DOCUMENT}>Gists: {user.publicGists}</Tag>\r\n        <Tag icon={IconNames.USER}>Followers: {user.followers}</Tag>\r\n        <Tag icon={IconNames.USER}>Following: {user.following}</Tag>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default UserSummary;\r\n","import React from 'react';\r\nimport { RadialChart, DiscreteColorLegend } from 'react-vis';\r\nimport { Card, Elevation, Callout, Intent } from '@blueprintjs/core';\r\nimport { LanguageStatistics } from '../models/LanguageStatistics';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { StarsStatistics } from '../models/StarsStatistics';\r\n\r\ninterface RepositoriesSummaryProps {\r\n  languageStatistics: LanguageStatistics;\r\n  starsStatistics: StarsStatistics;\r\n}\r\n\r\nfunction RepositoriesSummary(props: RepositoriesSummaryProps) {\r\n  let { languageStatistics, starsStatistics } = props;\r\n  return (\r\n    <Card id=\"repositories-summary\" elevation={Elevation.TWO}>\r\n      <Callout intent={Intent.PRIMARY} icon={IconNames.PIE_CHART}>\r\n        {languageStatistics.language_count} languages used and {starsStatistics.total_stars} stars over{' '}\r\n        {languageStatistics.repository_count} repositories.\r\n      </Callout>\r\n      <div className=\"flex-card-section\">\r\n        <RadialChart\r\n          data={languageStatistics.languages\r\n            .map(language => {\r\n              return { angle: language.count, label: language.name };\r\n            })\r\n            .reverse()}\r\n          showLabels={true}\r\n          colorDomain={[0, 1, 2]}\r\n          width={300}\r\n          height={300}\r\n        />\r\n        <DiscreteColorLegend\r\n          orientation=\"horizontal\"\r\n          items={languageStatistics.languages.map(language => {\r\n            return { title: `${language.name}: ${language.count}` };\r\n          })}\r\n          width={150}\r\n        />\r\n        <div>\r\n          <p>\r\n            Max stars:{' '}\r\n            <a href={starsStatistics.max_stars_repo.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              {starsStatistics.max_stars_repo.name}\r\n            </a>{' '}\r\n            ({starsStatistics.max_stars_repo.stargazers_count})\r\n          </p>\r\n          <p>Average stars: {starsStatistics.average_stars}</p>\r\n          <p>Median stars: {starsStatistics.median_stars}</p>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default RepositoriesSummary;\r\n","import React from 'react';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { Tooltip, Position } from '@blueprintjs/core';\r\nimport IconItem from '../IconItem';\r\nimport { Repository } from '../../models/Repository';\r\n\r\ninterface RepositoryView {\r\n  repository: Repository;\r\n}\r\n\r\nfunction RepositoryView(props: RepositoryView) {\r\n  const { repository } = props;\r\n  return (\r\n    <div className=\"repository\">\r\n      <div className=\"repository-header\">\r\n        <IconItem\r\n          icon={repository.fork ? IconNames.GIT_BRANCH : IconNames.GIT_REPO}\r\n          text={repository.name}\r\n          link={repository.html_url}\r\n        />\r\n        {repository.language && (\r\n          <div className=\"repository-tag\">\r\n            <IconItem icon={IconNames.CODE} text={repository.language} />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <i>{repository.description}</i>\r\n      </div>\r\n      <div className=\"repository-footer\">\r\n        {repository.stargazers_count !== 0 && <IconItem icon={IconNames.STAR} text={repository.stargazers_count} />}\r\n        {repository.forks !== 0 && <IconItem icon={IconNames.GIT_BRANCH} text={repository.forks} />}\r\n        {repository.open_issues !== 0 && <IconItem icon={IconNames.ISSUE} text={repository.open_issues} />}\r\n        <div className=\"repository-footer-right\">\r\n          <Tooltip content={repository.updated_at} boundary=\"viewport\" position={Position.TOP}>\r\n            <IconItem icon={IconNames.UPDATED} text={new Date(repository.updated_at).toLocaleDateString()} />\r\n          </Tooltip>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RepositoryView;\r\n","import { Repository } from '../../models/Repository';\r\nimport { Sorting } from '../../constants/Sorting';\r\n\r\nconst sortRepositories = (repositories: Repository[], sorting: Sorting) => {\r\n  switch (sorting) {\r\n    case Sorting.Alphabetical:\r\n      return repositories.sort((r1, r2) =>\r\n        r1.name.toLowerCase() < r2.name.toLowerCase() ? -1 : r1.name.toLowerCase() > r2.name.toLowerCase() ? 1 : 0,\r\n      );\r\n    case Sorting.ByStars:\r\n      return repositories.sort((r1, r2) => r2.stargazers_count - r1.stargazers_count);\r\n    case Sorting.ByUpdateDate:\r\n      return repositories.sort((r1, r2) => (new Date(r1.updated_at) <= new Date(r2.updated_at) ? 1 : -1));\r\n    default:\r\n      return repositories;\r\n  }\r\n};\r\n\r\nexport default sortRepositories;\r\n","import { Sorting } from '../constants/Sorting';\r\nimport { ActionTypeKeys } from './actionTypeKeys';\r\nimport sortRepositories from './helpers/sortRepositories';\r\nimport { Repository } from '../models/Repository';\r\n\r\nconst changeSorting = (sorting: Sorting) => (dispatch, getState) => {\r\n  dispatch({\r\n    type: ActionTypeKeys.SET_SORTING,\r\n    sorting: sorting,\r\n  });\r\n  const { repositories } = getState();\r\n  dispatch({\r\n    type: ActionTypeKeys.SET_REPOSITORIES,\r\n    repositories: sortRepositories(repositories, sorting),\r\n  });\r\n};\r\n\r\nconst loadRepositories = (repositories: Repository[]) => (dispatch, getState) => {\r\n  const { sorting } = getState();\r\n  dispatch({\r\n    type: ActionTypeKeys.SET_REPOSITORIES,\r\n    repositories: sortRepositories(repositories, sorting),\r\n  });\r\n};\r\n\r\nexport { changeSorting, loadRepositories };\r\n","import { Sorting } from '../../constants/Sorting';\r\nimport { IconNames, IconName } from '@blueprintjs/icons';\r\n\r\nconst sortingDisplayText = (sorting: Sorting) => {\r\n  let text: string;\r\n  switch (sorting) {\r\n    case Sorting.Alphabetical:\r\n      text = 'Alphabetically';\r\n      break;\r\n    case Sorting.ByStars:\r\n      text = 'By stars';\r\n      break;\r\n    case Sorting.ByUpdateDate:\r\n      text = 'Last updated';\r\n      break;\r\n    default:\r\n      text = '?';\r\n      break;\r\n  }\r\n  return text;\r\n};\r\n\r\nconst sortingIconName = (sorting: Sorting) => {\r\n  let icon: IconName;\r\n  switch (sorting) {\r\n    case Sorting.Alphabetical:\r\n      icon = IconNames.SORT_ALPHABETICAL;\r\n      break;\r\n    case Sorting.ByStars:\r\n      icon = IconNames.SORT_NUMERICAL_DESC;\r\n      break;\r\n    case Sorting.ByUpdateDate:\r\n      icon = IconNames.SORT_DESC;\r\n      break;\r\n    default:\r\n      icon = IconNames.SORT_DESC;\r\n      break;\r\n  }\r\n  return icon;\r\n};\r\n\r\nexport { sortingDisplayText, sortingIconName };\r\n","import React from 'react';\r\nimport { Sorting } from '../../constants/Sorting';\r\nimport { MenuItem } from '@blueprintjs/core';\r\nimport { sortingDisplayText, sortingIconName } from './helpers';\r\n\r\ninterface SortingOptionProps {\r\n  sorting: Sorting;\r\n  handler: Function;\r\n}\r\n\r\nfunction SortingOption(props: SortingOptionProps) {\r\n  const { sorting, handler } = props;\r\n  return <MenuItem text={sortingDisplayText(sorting)} icon={sortingIconName(sorting)} onClick={handler(sorting)} />;\r\n}\r\n\r\nexport default SortingOption;\r\n","import React from 'react';\r\nimport { Sorting } from '../../constants/Sorting';\r\nimport { Menu } from '@blueprintjs/core';\r\nimport SortingOption from './SortingOption';\r\n\r\ninterface SortingOptionProps {\r\n  handler: Function;\r\n}\r\n\r\nfunction SortingOptions(props: SortingOptionProps) {\r\n  const { handler } = props;\r\n  return (\r\n    <Menu>\r\n      <SortingOption sorting={Sorting.Alphabetical} handler={handler} />\r\n      <SortingOption sorting={Sorting.ByStars} handler={handler} />\r\n      <SortingOption sorting={Sorting.ByUpdateDate} handler={handler} />\r\n    </Menu>\r\n  );\r\n}\r\n\r\nexport default SortingOptions;\r\n","import React, { useState } from 'react';\r\nimport { Card, Elevation, Button, HTMLTable, ButtonGroup, Popover, Position } from '@blueprintjs/core';\r\nimport { Repository } from '../../models/Repository';\r\nimport RepositoryView from './RepositoryView';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Sorting } from '../../constants/Sorting';\r\nimport { changeSorting } from '../../actions/actionCreators';\r\nimport { sortingDisplayText, sortingIconName } from './helpers';\r\nimport SortingOptions from './SortingOptions';\r\n\r\ninterface RepositoryListProps {\r\n  repositories: Repository[];\r\n  sorting: Sorting;\r\n}\r\n\r\nfunction RepositoryList(props: RepositoryListProps) {\r\n  let { repositories, sorting } = props;\r\n  const dispatch = useDispatch();\r\n  const [viewMode, setViewMode] = useState('tiles');\r\n\r\n  const toggleViewMode = () => {\r\n    setViewMode(viewMode === 'tiles' ? 'table' : 'tiles');\r\n  };\r\n\r\n  const changeSortingHandler = (sorting: Sorting) => () => {\r\n    dispatch(changeSorting(sorting));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {repositories.length > 0 && (\r\n        <Card id=\"repository-list\" elevation={Elevation.TWO}>\r\n          <div id=\"repository-list-header\">\r\n            <div id=\"repository-list-controls\">\r\n              <ButtonGroup>\r\n                <Popover content={<SortingOptions handler={changeSortingHandler} />} position={Position.BOTTOM}>\r\n                  <Button\r\n                    text={'Sorting: ' + sortingDisplayText(sorting)}\r\n                    icon={sortingIconName(sorting)}\r\n                    rightIcon={IconNames.CARET_DOWN}\r\n                  />\r\n                </Popover>\r\n                <Button\r\n                  text={viewMode === 'tiles' ? 'View table' : 'View tiles'}\r\n                  onClick={toggleViewMode}\r\n                  icon={viewMode === 'tiles' ? IconNames.TH : IconNames.GRID_VIEW}\r\n                />\r\n              </ButtonGroup>\r\n            </div>\r\n            <h2>Repositories</h2>\r\n          </div>\r\n          {viewMode === 'tiles' ? (\r\n            <div id=\"repository-list-cards-container\">\r\n              {repositories.map((repository, index) => (\r\n                <RepositoryView repository={repository} key={index} />\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div id=\"repository-list-table-container\">\r\n              <HTMLTable bordered={true} striped={true}>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Repository</th>\r\n                    <th>Description</th>\r\n                    <th>Language</th>\r\n                    <th>Stars</th>\r\n                    <th>Forked</th>\r\n                    <th>Open Issues</th>\r\n                    <th>Last Updated</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {repositories.map((repository, index) => (\r\n                    <tr key={index}>\r\n                      <td>\r\n                        <a href={repository.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                          {repository.name}\r\n                        </a>\r\n                      </td>\r\n                      <td>{repository.description}</td>\r\n                      <td>{repository.language}</td>\r\n                      <td>{repository.stargazers_count}</td>\r\n                      <td>{repository.forks}</td>\r\n                      <td>{repository.open_issues}</td>\r\n                      <td>{new Date(repository.updated_at).toLocaleDateString()}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </HTMLTable>\r\n            </div>\r\n          )}\r\n        </Card>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RepositoryList;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../models/AppState';\r\nimport UserSummary from './UserSummary';\r\nimport RepositoriesSummary from './RepositoriesSummary';\r\nimport RepositoryList from './repostory_list/RepositoryList';\r\nimport { NonIdealState } from '@blueprintjs/core';\r\nimport { IconNames } from '@blueprintjs/icons';\r\n\r\nfunction Summary() {\r\n  const user = useSelector((state: AppState) => state.user);\r\n  const repositories = useSelector((state: AppState) => state.repositories);\r\n  const sorting = useSelector((state: AppState) => state.sorting);\r\n  const languageStatistics = useSelector((state: AppState) => state.language_statistics);\r\n  const starsStatistics = useSelector((state: AppState) => state.stars_statistics);\r\n  return (\r\n    <main className=\"viewport\">\r\n      {user.login !== '' ? (\r\n        <div>\r\n          <UserSummary user={user} />\r\n          {repositories.length !== 0 ? (\r\n            <div>\r\n              <RepositoriesSummary languageStatistics={languageStatistics} starsStatistics={starsStatistics} />\r\n              <RepositoryList repositories={repositories} sorting={sorting} />\r\n            </div>\r\n          ) : (\r\n            <NonIdealState\r\n              icon={IconNames.DISABLE}\r\n              title=\"No repositories.\"\r\n              description=\"The user has no public repositories.\"\r\n            />\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <NonIdealState\r\n          icon={IconNames.DISABLE}\r\n          title=\"No user selected.\"\r\n          description=\"Enter a Github user name in the search bar above!\"\r\n        />\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Summary;\r\n","import axios from 'axios';\r\n\r\nexport default {\r\n  getUser: async userName => {\r\n    let user = await axios.get(`https://api.github.com/users/${userName}`);\r\n    return user.data;\r\n  },\r\n\r\n  getUserRepositories: (url, page) => {\r\n    return axios.get(`${url}?page=${page}&per_page=100`);\r\n  },\r\n};\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Alignment,\r\n  Button,\r\n  AnchorButton,\r\n  Navbar,\r\n  Intent,\r\n  Tooltip,\r\n  InputGroup,\r\n  Popover,\r\n  PopoverPosition,\r\n  Card,\r\n  Icon,\r\n  Colors,\r\n} from '@blueprintjs/core';\r\nimport Summary from './Summary';\r\nimport api from '../services/api';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ActionTypeKeys } from '../actions/actionTypeKeys';\r\nimport { Repository } from '../models/Repository';\r\nimport { Language } from '../models/Language';\r\nimport { StarsStatistics } from '../models/StarsStatistics';\r\nimport { loadRepositories } from '../actions/actionCreators';\r\n\r\nconst roundStarsStat = (stars: number) => Math.round(stars * 10) / 10;\r\n\r\nconst calculateMeanStars = (stars: number, repoCount: number) => roundStarsStat(stars / repoCount);\r\n\r\nconst calculateMedianStars = (repositories: Repository[]) => {\r\n  const sortedRepos = repositories.slice().sort((r1, r2) => r2.stargazers_count - r1.stargazers_count);\r\n  const repoMedian = sortedRepos.length / 2;\r\n  if (sortedRepos.length % 2 === 1) {\r\n    return roundStarsStat(\r\n      (sortedRepos[Math.floor(repoMedian)].stargazers_count + sortedRepos[Math.ceil(repoMedian)].stargazers_count) / 2,\r\n    );\r\n  } else {\r\n    return sortedRepos[repoMedian].stargazers_count;\r\n  }\r\n};\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const [userName, setUserName] = useState('');\r\n  const [popoverVisible, setPopoverVisible] = useState(false);\r\n\r\n  const handleSearch = () => {\r\n    if (userName !== '') {\r\n      api\r\n        .getUser(userName)\r\n        .then(result => {\r\n          dispatch({\r\n            type: ActionTypeKeys.SET_USER,\r\n            user: {\r\n              login: result.login,\r\n              name: result.name,\r\n              bio: result.bio,\r\n              location: result.location,\r\n              company: result.company,\r\n              blog: result.blog,\r\n              email: result.email,\r\n              avatarUrl: result.avatar_url,\r\n              htmlUrl: result.html_url,\r\n              publicRepos: result.public_repos,\r\n              publicGists: result.public_gists,\r\n              followers: result.followers,\r\n              following: result.following,\r\n              reposUrl: result.repos_url,\r\n            },\r\n          });\r\n          let numberOfRepos = result.public_repos;\r\n          let page = 1;\r\n          let promises: object[] = [];\r\n          while (numberOfRepos > 0) {\r\n            promises.push(api.getUserRepositories(result.repos_url, page));\r\n            numberOfRepos -= 100;\r\n            page++;\r\n          }\r\n          Promise.all(promises).then((values: any[]) => {\r\n            let repositories: Repository[] = [];\r\n            for (let value of values) {\r\n              repositories.push(...value.data);\r\n            }\r\n            processLoadedRepos(repositories);\r\n          });\r\n        })\r\n        .catch(() => {\r\n          setPopoverVisible(true);\r\n          setInterval(() => setPopoverVisible(false), 2000);\r\n        });\r\n    }\r\n  };\r\n\r\n  const processLoadedRepos = (repositories: Repository[]) => {\r\n    const languages: Language[] = [];\r\n    const starsStatistics: StarsStatistics = {\r\n      max_stars_repo: null,\r\n      total_stars: 0,\r\n      average_stars: 0,\r\n      median_stars: 0,\r\n    };\r\n\r\n    // Compute repositories stats\r\n    let maxStars = 0;\r\n    for (let repository of repositories) {\r\n      // Find unique languages and count the number of repos for each\r\n      const language = languages.find(language => language.name === repository.language);\r\n      if (language === undefined) {\r\n        languages.push({\r\n          name: repository.language,\r\n          count: 1,\r\n        });\r\n      } else {\r\n        language.count++;\r\n      }\r\n\r\n      // Find repo with most stars and count total stars\r\n      starsStatistics.total_stars += repository.stargazers_count;\r\n      if (repository.stargazers_count > maxStars) {\r\n        starsStatistics.max_stars_repo = repository;\r\n        maxStars = repository.stargazers_count;\r\n      }\r\n    }\r\n\r\n    // Calculate average and median stars\r\n    starsStatistics.average_stars = calculateMeanStars(starsStatistics.total_stars, repositories.length);\r\n    starsStatistics.median_stars = calculateMedianStars(repositories);\r\n\r\n    // Handle the `null` language\r\n    const unknownLanguage = languages.find(language => language.name === null);\r\n    if (unknownLanguage !== undefined) {\r\n      unknownLanguage.name = 'Unknown';\r\n    }\r\n\r\n    // Sort by most used language\r\n    languages.sort((language1, language2) => language2.count - language1.count);\r\n\r\n    // Dispatch full repo list and language stats\r\n    dispatch({\r\n      type: ActionTypeKeys.SET_STATISTICS,\r\n      languageStatistics: { languages, language_count: languages.length, repository_count: repositories.length },\r\n      starsStatistics: starsStatistics,\r\n    });\r\n    dispatch(loadRepositories(repositories));\r\n  };\r\n\r\n  const inputButtons = (\r\n    <>\r\n      <Tooltip content=\"Search\">\r\n        <Button icon=\"search\" intent={Intent.PRIMARY} minimal={true} onClick={handleSearch} />\r\n      </Tooltip>\r\n      <Tooltip content=\"Clear\">\r\n        <Button icon=\"cross\" intent={Intent.WARNING} minimal={true} onClick={() => setUserName('')} />\r\n      </Tooltip>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Navbar>\r\n        <div className=\"viewport\">\r\n          <Navbar.Group align={Alignment.LEFT}>\r\n            <Navbar.Heading>Github Repo Summary</Navbar.Heading>\r\n          </Navbar.Group>\r\n          <Navbar.Group align={Alignment.RIGHT}>\r\n            <Popover position={PopoverPosition.BOTTOM} isOpen={popoverVisible}>\r\n              <InputGroup\r\n                placeholder=\"Github user name\"\r\n                rightElement={inputButtons}\r\n                value={userName}\r\n                onChange={(event: { target: any }) => setUserName(event.target.value)}\r\n                onKeyPress={event => {\r\n                  if (event.charCode === 13) {\r\n                    handleSearch();\r\n                  }\r\n                }}\r\n              />\r\n              <Card>\r\n                <Icon icon={IconNames.ERROR} intent={Intent.DANGER} style={{ float: 'left' }} />\r\n                <p>\r\n                  User <span style={{ color: Colors.RED1 }}>{userName}</span> could not be found!\r\n                </p>\r\n              </Card>\r\n            </Popover>\r\n            <Navbar.Divider />\r\n            <AnchorButton\r\n              icon=\"git-repo\"\r\n              text=\"Github\"\r\n              href=\"https://github.com/alex-c/github-repo-summary\"\r\n              target=\"_blank\"\r\n            />\r\n          </Navbar.Group>\r\n        </div>\r\n      </Navbar>\r\n      <Summary />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// Import Redux\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducer';\r\n\r\n// Import Blueprint\r\nimport { FocusStyleManager } from '@blueprintjs/core';\r\n\r\n// Set up App\r\nimport App from './components/App';\r\nimport './index.scss';\r\n\r\n// Set up Blueprint\r\nFocusStyleManager.onlyShowFocusOnTabs();\r\n\r\n// Set up store\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// Render!\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}