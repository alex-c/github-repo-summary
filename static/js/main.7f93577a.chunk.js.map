{"version":3,"sources":["actions/actionTypeKeys.ts","constants/Sorting.ts","constants/LocalStorageKeys.ts","reducer.ts","components/IconItem.tsx","actions/helpers/sortRepositories.ts","actions/actionCreators.ts","services/api.js","actions/helpers/calculateStats.ts","actions/helpers/showErrorToast.ts","actions/helpers/createToaster.ts","actions/thunkActionCreators.ts","components/UserSummary.tsx","components/RepositoriesSummary.tsx","components/repostory_list/RepositoryView.tsx","components/repostory_list/helpers.ts","components/repostory_list/SortingOption.tsx","components/repostory_list/SortingOptions.tsx","components/repostory_list/RepositoryList.tsx","components/Summary.tsx","components/Navbar.tsx","components/Favorites.tsx","components/App.tsx","index.tsx"],"names":["ActionTypeKeys","Sorting","localStorageKeys","favorites","initialState","user","login","name","bio","location","company","blog","email","avatar_url","htmlUrl","public_repos","public_gists","followers","following","repos_url","loading_state","language_statistics","stars_statistics","repositories","sorting","Alphabetical","IconItem","props","icon","text","link","react_default","a","createElement","Fragment","icon_icon","href","target","rel","sortRepositories","sortedRepositories","slice","sort","r1","r2","toLowerCase","ByStars","stargazers_count","ByUpdateDate","Date","updated_at","setRepositories","type","SET_REPOSITORIES","setLoadingState","SET_LOADING_STATE","setFavorites","SET_FAVORITES","api","getUser","_getUser","Object","asyncToGenerator","regenerator_default","mark","_callee","userName","wrap","_context","prev","next","axios","get","concat","sent","abrupt","data","stop","_x","apply","this","arguments","getUserRepositories","url","page","roundStarsStat","stars","Math","round","errorToaster","Toaster","create","className","position","Position","TOP_RIGHT","showErrorToast","message","length","undefined","IconNames","ERROR","show","intent","Intent","DANGER","timeout","searchUser","dispatch","then","result","SET_USER","numberOfRepos","promises","push","Promise","all","values","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","value","toConsumableArray","err","return","processLoadedRepos","catch","error","includes","SEARCH","LOCK","repoCount","languages","starsStatistics","max_stars_repo","total_stars","average_stars","median_stars","maxStars","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","repository","language","find","count","_iterator2","sortedRepos","repoMedian","floor","ceil","calculateMedianStars","unknownLanguage","language1","language2","languageStatistics","SET_STATISTICS","setStatistics","language_count","repository_count","loadRepositories","changeSorting","getState","SET_SORTING","setSorting","addUserToFavorites","map","favorite","newFavorites","removeUserFromFavorites","filter","addUserToFavoritesIfExists","UserSummary","useSelector","state","useDispatch","userIsFavorite","card","id","elevation","Elevation","TWO","src","alt","STAR","STAR_EMPTY","onClick","html_url","components_IconItem","MAP_MARKER","OFFICE","ENVELOPE","LINK","tag","GIT_BRANCH","DOCUMENT","USER","RepositoriesSummary","callout","PRIMARY","CODE","react_apexcharts_min_default","width","options","labels","plotOptions","pie","expandOnClick","responsive","breakpoint","chart","legend","series","RepositoryView","fork","GIT_REPO","description","forks","open_issues","ISSUE","tooltip","content","boundary","TOP","UPDATED","toLocaleDateString","sortingDisplayText","sortingIconName","SORT_ALPHABETICAL","SORT_NUMERICAL_DESC","SORT_DESC","SortingOption","handler","menuItem","SortingOptions","menu","repostory_list_SortingOption","RepositoryList","_useState","useState","_useState2","slicedToArray","viewMode","setViewMode","buttonGroup","popover","repostory_list_SortingOptions","BOTTOM","usePortal","portalContainer","document","body","buttons","rightIcon","CARET_DOWN","TH","GRID_VIEW","index","repostory_list_RepositoryView","key","htmlTable","bordered","striped","Summary","components_UserSummary","spinner","components_RepositoriesSummary","repostory_list_RepositoryList","nonIdealState","DISABLE","title","Navbar","setUserName","currentUserName","searchHandler","inputGroup","placeholder","rightElement","minimal","TRASH","onChange","event","onKeyPress","charCode","Favorites","editMode","setEditMode","toggleEditModeHandler","tagInput","leftIcon","onRemove","f","onAdd","newUser","shift","addOnPaste","TICK","SUCCESS","EDIT","interactive","App","components_Navbar","components_Favorites","components_Summary","FocusStyleManager","onlyShowFocusOnTabs","JSON","parse","localStorage","getItem","store","createStore","action","objectSpread","setItem","stringify","applyMiddleware","thunk","ReactDOM","render","es","components_App","getElementById"],"mappings":"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","file":"static/js/main.7f93577a.chunk.js","sourcesContent":["export enum ActionTypeKeys {\r\n    SET_USER = \"SET_USER\",\r\n    SET_REPOSITORIES = \"SET_REPOSITORIES\",\r\n    SET_STATISTICS = \"SET_STATISTICS\",\r\n    SET_SORTING = \"SET_SORTING\",\r\n    SET_LOADING_STATE = \"SET_LOADING_STATE\",\r\n    SET_FAVORITES = \"SET_FAVORITES\",\r\n    OTHER_ACTION = \"__any_other_action_type__\"\r\n}","export enum Sorting {\r\n  Alphabetical,\r\n  ByStars,\r\n  ByUpdateDate\r\n}","const localStorageKeys = { favorites: 'GithubRepoSummary.favorites' };\r\n\r\nexport default localStorageKeys;\r\n","import { ActionTypes } from './actions/actionTypes';\r\nimport { ActionTypeKeys } from './actions/actionTypeKeys';\r\nimport { AppState } from './models/AppState';\r\nimport { Sorting } from './constants/Sorting';\r\nimport localStorageKeys from './constants/LocalStorageKeys';\r\n\r\nconst initialState: AppState = {\r\n  user: {\r\n    login: '',\r\n    name: '',\r\n    bio: '',\r\n    location: '',\r\n    company: '',\r\n    blog: '',\r\n    email: '',\r\n    avatar_url: '',\r\n    htmlUrl: '',\r\n    public_repos: 0,\r\n    public_gists: 0,\r\n    followers: 0,\r\n    following: 0,\r\n    repos_url: '',\r\n  },\r\n  favorites: [],\r\n  loading_state: false,\r\n  language_statistics: null,\r\n  stars_statistics: null,\r\n  repositories: [],\r\n  sorting: Sorting.Alphabetical,\r\n};\r\n\r\nexport default function reducer(state: AppState = initialState, action: ActionTypes) {\r\n  switch (action.type) {\r\n    case ActionTypeKeys.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n    case ActionTypeKeys.SET_REPOSITORIES:\r\n      return {\r\n        ...state,\r\n        repositories: action.repositories,\r\n      };\r\n    case ActionTypeKeys.SET_STATISTICS:\r\n      return {\r\n        ...state,\r\n        language_statistics: action.languageStatistics,\r\n        stars_statistics: action.starsStatistics,\r\n      };\r\n    case ActionTypeKeys.SET_SORTING:\r\n      return {\r\n        ...state,\r\n        sorting: action.sorting,\r\n      };\r\n    case ActionTypeKeys.SET_LOADING_STATE:\r\n      return {\r\n        ...state,\r\n        loading_state: action.loading_state,\r\n      };\r\n    case ActionTypeKeys.SET_FAVORITES:\r\n      localStorage.setItem(localStorageKeys.favorites, JSON.stringify(action.favorites));\r\n      return {\r\n        ...state,\r\n        favorites: action.favorites,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Icon, IconName } from '@blueprintjs/core';\r\n\r\ninterface IconItemProps {\r\n  icon: IconName;\r\n  text: string | number;\r\n  link?: string;\r\n}\r\n\r\nfunction IconItem(props: IconItemProps) {\r\n  let { icon, text, link } = props;\r\n  return (\r\n    <>\r\n      <Icon icon={icon} />\r\n      {(link && (\r\n        <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {text}\r\n        </a>\r\n      )) || <>{text}</>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default IconItem;\r\n","import { Repository } from '../../models/Repository';\r\nimport { Sorting } from '../../constants/Sorting';\r\n\r\nconst sortRepositories = (repositories: Repository[], sorting: Sorting) => {\r\n  let sortedRepositories = repositories.slice();\r\n  switch (sorting) {\r\n    case Sorting.Alphabetical:\r\n      sortedRepositories = sortedRepositories.sort((r1, r2) =>\r\n        r1.name.toLowerCase() < r2.name.toLowerCase() ? -1 : r1.name.toLowerCase() > r2.name.toLowerCase() ? 1 : 0,\r\n      );\r\n      break;\r\n    case Sorting.ByStars:\r\n      sortedRepositories = sortedRepositories.sort((r1, r2) => r2.stargazers_count - r1.stargazers_count);\r\n      break;\r\n    case Sorting.ByUpdateDate:\r\n      sortedRepositories = sortedRepositories.sort((r1, r2) =>\r\n        new Date(r1.updated_at) <= new Date(r2.updated_at) ? 1 : -1,\r\n      );\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return sortedRepositories;\r\n};\r\n\r\nexport default sortRepositories;\r\n","import { User } from '../models/User';\r\nimport {\r\n  SetUserAction,\r\n  SetRepositoriesAction,\r\n  SetSortingAction,\r\n  SetStatisticsAction,\r\n  SetLoadingStateAction,\r\n  SetFavoritesAction,\r\n} from './actions';\r\nimport { ActionTypeKeys } from './actionTypeKeys';\r\nimport { Repository } from '../models/Repository';\r\nimport { Sorting } from '../constants/Sorting';\r\nimport { LanguageStatistics } from '../models/LanguageStatistics';\r\nimport { StarsStatistics } from '../models/StarsStatistics';\r\nimport { Favorite } from '../models/Favorite';\r\n\r\nconst setUser = (user: User): SetUserAction => {\r\n  return {\r\n    type: ActionTypeKeys.SET_USER,\r\n    user,\r\n  };\r\n};\r\n\r\nconst setRepositories = (repositories: Repository[]): SetRepositoriesAction => {\r\n  return {\r\n    type: ActionTypeKeys.SET_REPOSITORIES,\r\n    repositories,\r\n  };\r\n};\r\n\r\nconst setStatistics = (\r\n  languageStatistics: LanguageStatistics,\r\n  starsStatistics: StarsStatistics,\r\n): SetStatisticsAction => {\r\n  return {\r\n    type: ActionTypeKeys.SET_STATISTICS,\r\n    languageStatistics,\r\n    starsStatistics,\r\n  };\r\n};\r\n\r\nconst setSorting = (sorting: Sorting): SetSortingAction => {\r\n  return {\r\n    type: ActionTypeKeys.SET_SORTING,\r\n    sorting,\r\n  };\r\n};\r\n\r\nconst setLoadingState = (loading_state: boolean): SetLoadingStateAction => {\r\n  return {\r\n    type: ActionTypeKeys.SET_LOADING_STATE,\r\n    loading_state,\r\n  };\r\n};\r\n\r\nconst setFavorites = (favorites: Favorite[]): SetFavoritesAction => {\r\n  return {\r\n    type: ActionTypeKeys.SET_FAVORITES,\r\n    favorites,\r\n  };\r\n};\r\n\r\nexport { setUser, setRepositories, setStatistics, setSorting, setLoadingState, setFavorites };\r\n","import axios from 'axios';\r\n\r\nexport default {\r\n  getUser: async userName => {\r\n    let user = await axios.get(`https://api.github.com/users/${userName}`);\r\n    return user.data;\r\n  },\r\n\r\n  getUserRepositories: (url, page) => {\r\n    return axios.get(`${url}?page=${page}&per_page=100`);\r\n  },\r\n};\r\n","import { Repository } from '../../models/Repository';\r\n\r\nconst roundStarsStat = (stars: number) => Math.round(stars * 10) / 10;\r\n\r\nconst calculateMeanStars = (stars: number, repoCount: number) => roundStarsStat(stars / repoCount);\r\n\r\nconst calculateMedianStars = (repositories: Repository[]) => {\r\n  const sortedRepos = repositories.slice().sort((r1, r2) => r2.stargazers_count - r1.stargazers_count);\r\n  const repoMedian = sortedRepos.length / 2;\r\n  if (sortedRepos.length % 2 === 1) {\r\n    return roundStarsStat(\r\n      (sortedRepos[Math.floor(repoMedian)].stargazers_count + sortedRepos[Math.ceil(repoMedian)].stargazers_count) / 2,\r\n    );\r\n  } else {\r\n    return sortedRepos[repoMedian].stargazers_count;\r\n  }\r\n};\r\n\r\nexport { calculateMeanStars, calculateMedianStars };\r\n","import { IconName, Intent } from '@blueprintjs/core';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { createToaster } from './createToaster';\r\n\r\nconst errorToaster = createToaster();\r\n\r\nconst showErrorToast = (message: string, icon: IconName = IconNames.ERROR) => {\r\n  errorToaster.show({\r\n    message,\r\n    icon,\r\n    intent: Intent.DANGER,\r\n    timeout: 1500,\r\n  });\r\n};\r\n\r\nexport default showErrorToast;\r\n","import { Toaster, Position } from '@blueprintjs/core';\r\n\r\nexport const createToaster = () =>\r\n  Toaster.create({\r\n    className: 'error-toaster',\r\n    position: Position.TOP_RIGHT,\r\n  });\r\n","import { Sorting } from '../constants/Sorting';\r\nimport sortRepositories from './helpers/sortRepositories';\r\nimport { Repository } from '../models/Repository';\r\nimport { setRepositories, setSorting, setLoadingState, setFavorites, setUser, setStatistics } from './actionCreators';\r\nimport { Favorite } from '../models/Favorite';\r\nimport api from '../services/api';\r\nimport { Language } from '../models/Language';\r\nimport { StarsStatistics } from '../models/StarsStatistics';\r\nimport { calculateMeanStars, calculateMedianStars } from './helpers/calculateStats';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport showErrorToast from './helpers/showErrorToast';\r\n\r\nconst searchUser = (userName: string) => dispatch => {\r\n  api\r\n    .getUser(userName)\r\n    .then(result => {\r\n      dispatch(setUser(result));\r\n      dispatch(setLoadingState(true));\r\n      dispatch(setRepositories([]));\r\n      let numberOfRepos = result.public_repos;\r\n      if (numberOfRepos > 0) {\r\n        let page = 1;\r\n        let promises: object[] = [];\r\n        while (numberOfRepos > 0) {\r\n          promises.push(api.getUserRepositories(result.repos_url, page));\r\n          numberOfRepos -= 100;\r\n          page++;\r\n        }\r\n        Promise.all(promises).then((values: any[]) => {\r\n          let repositories: Repository[] = [];\r\n          for (let value of values) {\r\n            repositories.push(...value.data);\r\n          }\r\n          dispatch(processLoadedRepos(repositories));\r\n        });\r\n      } else {\r\n        dispatch(setLoadingState(false));\r\n      }\r\n    })\r\n    .catch((error: Error) => {\r\n      if (error.message.includes('404')) {\r\n        showErrorToast(`User \"${userName}\" could not be found!`, IconNames.SEARCH);\r\n      } else if (error.message.includes('403')) {\r\n        showErrorToast('Rate limit reached! Try again later.', IconNames.LOCK);\r\n      } else {\r\n        showErrorToast('An error occured while attempting to retrieve user info from Github.');\r\n      }\r\n    });\r\n};\r\n\r\nconst processLoadedRepos = (repositories: Repository[]) => dispatch => {\r\n  const languages: Language[] = [];\r\n  const starsStatistics: StarsStatistics = {\r\n    max_stars_repo: repositories[0],\r\n    total_stars: 0,\r\n    average_stars: 0,\r\n    median_stars: 0,\r\n  };\r\n\r\n  // Compute repositories stats\r\n  let maxStars = starsStatistics.max_stars_repo.stargazers_count;\r\n  for (let repository of repositories) {\r\n    // Find unique languages and count the number of repos for each\r\n    const language = languages.find(language => language.name === repository.language);\r\n    if (language === undefined) {\r\n      languages.push({\r\n        name: repository.language,\r\n        count: 1,\r\n      });\r\n    } else {\r\n      language.count++;\r\n    }\r\n\r\n    // Find repo with most stars and count total stars\r\n    starsStatistics.total_stars += repository.stargazers_count;\r\n    if (repository.stargazers_count > maxStars) {\r\n      starsStatistics.max_stars_repo = repository;\r\n      maxStars = repository.stargazers_count;\r\n    }\r\n  }\r\n\r\n  // Calculate average and median stars\r\n  starsStatistics.average_stars = calculateMeanStars(starsStatistics.total_stars, repositories.length);\r\n  starsStatistics.median_stars = calculateMedianStars(repositories);\r\n\r\n  // Handle the `null` language\r\n  const unknownLanguage = languages.find(language => language.name === null);\r\n  if (unknownLanguage !== undefined) {\r\n    unknownLanguage.name = 'Unknown';\r\n  }\r\n\r\n  // Sort by most used language\r\n  languages.sort((language1, language2) => language2.count - language1.count);\r\n\r\n  // Dispatch full repo list and language stats\r\n  dispatch(\r\n    setStatistics(\r\n      { languages, language_count: languages.length, repository_count: repositories.length },\r\n      starsStatistics,\r\n    ),\r\n  );\r\n  dispatch(loadRepositories(repositories));\r\n};\r\n\r\nconst changeSorting = (sorting: Sorting) => (dispatch, getState) => {\r\n  dispatch(setSorting(sorting));\r\n  const { repositories } = getState();\r\n  const sortedRepositories = sortRepositories(repositories, sorting);\r\n  dispatch(setRepositories(sortedRepositories));\r\n};\r\n\r\nconst loadRepositories = (repositories: Repository[]) => (dispatch, getState) => {\r\n  const { sorting } = getState();\r\n  const sortedRepositories = sortRepositories(repositories, sorting);\r\n  dispatch(setRepositories(sortedRepositories));\r\n  dispatch(setLoadingState(false));\r\n};\r\n\r\nconst addUserToFavorites = (user: Favorite) => (dispatch, getState) => {\r\n  const { favorites } = getState();\r\n  if (!favorites.map(favorite => favorite.name).includes(user.name)) {\r\n    const newFavorites: Favorite[] = favorites.slice();\r\n    newFavorites.push(user);\r\n    dispatch(setFavorites(newFavorites));\r\n  }\r\n};\r\n\r\nconst removeUserFromFavorites = (user: Favorite) => (dispatch, getState) => {\r\n  const { favorites } = getState();\r\n  dispatch(setFavorites(favorites.filter(favorite => favorite.name !== user.name)));\r\n};\r\n\r\nconst addUserToFavoritesIfExists = (userName: string) => (dispatch, getState) => {\r\n  api\r\n    .getUser(userName)\r\n    .then(result => {\r\n      dispatch(addUserToFavorites({ name: result.login }));\r\n    })\r\n    .catch(error => {\r\n      if (error.message.includes('404')) {\r\n        showErrorToast(`User \"${userName}\" could not be found!`, IconNames.SEARCH);\r\n      } else if (error.message.includes('403')) {\r\n        showErrorToast(`Rate limit reached! Can't check whether user \"${userName}\" exists.`, IconNames.LOCK);\r\n      } else {\r\n        showErrorToast('An error occured while attempting to retrieve user info from Github.');\r\n      }\r\n    });\r\n};\r\n\r\nexport {\r\n  searchUser,\r\n  processLoadedRepos,\r\n  changeSorting,\r\n  loadRepositories,\r\n  addUserToFavorites,\r\n  removeUserFromFavorites,\r\n  addUserToFavoritesIfExists,\r\n};\r\n","import React from 'react';\r\nimport { Card, Elevation, Tag, Icon } from '@blueprintjs/core';\r\nimport { User } from '../models/User';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport IconItem from './IconItem';\r\nimport { addUserToFavorites, removeUserFromFavorites } from '../actions/thunkActionCreators';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppState } from '../models/AppState';\r\n\r\ninterface UserSummaryProps {\r\n  user: User;\r\n}\r\n\r\nfunction UserSummary(props: UserSummaryProps) {\r\n  const favorites = useSelector((state: AppState) => state.favorites);\r\n  const { user } = props;\r\n  const dispatch = useDispatch();\r\n\r\n  const userIsFavorite = (): boolean => favorites.map(favorite => favorite.name).includes(user.login);\r\n\r\n  const toggleFavoriteHandler = () => {\r\n    if (userIsFavorite()) {\r\n      dispatch(removeUserFromFavorites({ name: user.login }));\r\n    } else {\r\n      dispatch(addUserToFavorites({ name: user.login }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card id=\"user-summary\" elevation={Elevation.TWO}>\r\n      <div id=\"avatar\">\r\n        <img src={user.avatar_url} alt=\"Github user avatar\" />\r\n      </div>\r\n      <div id=\"favorite\">\r\n        <Icon icon={userIsFavorite() ? IconNames.STAR : IconNames.STAR_EMPTY} onClick={toggleFavoriteHandler} />\r\n      </div>\r\n      <p>\r\n        <b>{user.name}</b> /&nbsp;\r\n        <a href={user.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {user.login}\r\n        </a>\r\n      </p>\r\n      <p>{user.bio}</p>\r\n      <p>\r\n        {user.location && <IconItem icon={IconNames.MAP_MARKER} text={user.location} />}\r\n        {user.company && <IconItem icon={IconNames.OFFICE} text={user.company} />}\r\n        {user.email && <IconItem icon={IconNames.ENVELOPE} text={user.email} />}\r\n        {user.blog !== '' && <IconItem icon={IconNames.LINK} text={user.blog} link={user.blog} />}\r\n      </p>\r\n      <div>\r\n        <Tag icon={IconNames.GIT_BRANCH}>Repositories: {user.public_repos}</Tag>\r\n        <Tag icon={IconNames.DOCUMENT}>Gists: {user.public_gists}</Tag>\r\n        <Tag icon={IconNames.USER}>Followers: {user.followers}</Tag>\r\n        <Tag icon={IconNames.USER}>Following: {user.following}</Tag>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default UserSummary;\r\n","import React from 'react';\r\nimport { Card, Elevation, Callout, Intent } from '@blueprintjs/core';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport { LanguageStatistics } from '../models/LanguageStatistics';\r\nimport { StarsStatistics } from '../models/StarsStatistics';\r\nimport { IconNames } from '@blueprintjs/icons';\r\n\r\ninterface RepositoriesSummaryProps {\r\n  languageStatistics: LanguageStatistics;\r\n  starsStatistics: StarsStatistics;\r\n}\r\n\r\nfunction RepositoriesSummary(props: RepositoriesSummaryProps) {\r\n  let { languageStatistics, starsStatistics } = props;\r\n  return (\r\n    <Card id=\"repositories-summary\" elevation={Elevation.TWO}>\r\n      <div className=\"flex-card-section\">\r\n        <div>\r\n          <Callout intent={Intent.PRIMARY} icon={IconNames.CODE}>\r\n            {languageStatistics.language_count} languages used in {languageStatistics.repository_count} repositories.\r\n          </Callout>\r\n          <ReactApexChart\r\n            type=\"pie\"\r\n            width=\"500\"\r\n            options={{\r\n              labels: languageStatistics.languages.map(language => language.name),\r\n              plotOptions: {\r\n                pie: {\r\n                  expandOnClick: false,\r\n                },\r\n              },\r\n              responsive: [\r\n                {\r\n                  breakpoint: 500,\r\n                  options: {\r\n                    chart: {\r\n                      width: 400,\r\n                    },\r\n                    legend: {\r\n                      position: 'bottom',\r\n                    },\r\n                  },\r\n                },\r\n                {\r\n                  breakpoint: 400,\r\n                  options: {\r\n                    chart: {\r\n                      width: 300,\r\n                    },\r\n                    legend: {\r\n                      position: 'bottom',\r\n                    },\r\n                  },\r\n                },\r\n              ],\r\n            }}\r\n            series={languageStatistics.languages.map(language => language.count)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Callout intent={Intent.PRIMARY} icon={IconNames.STAR}>\r\n            {starsStatistics.total_stars} stars over {languageStatistics.repository_count} repositories.\r\n          </Callout>\r\n          <div className=\"padded-content\">\r\n            <p>\r\n              Max stars:&nbsp;\r\n              <a href={starsStatistics.max_stars_repo.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {starsStatistics.max_stars_repo.name}\r\n              </a>\r\n              &nbsp;({starsStatistics.max_stars_repo.stargazers_count})\r\n            </p>\r\n            <p>Average stars: {starsStatistics.average_stars}</p>\r\n            <p>Median stars: {starsStatistics.median_stars}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default RepositoriesSummary;\r\n","import React from 'react';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { Tooltip, Position } from '@blueprintjs/core';\r\nimport IconItem from '../IconItem';\r\nimport { Repository } from '../../models/Repository';\r\n\r\ninterface RepositoryView {\r\n  repository: Repository;\r\n}\r\n\r\nfunction RepositoryView(props: RepositoryView) {\r\n  const { repository } = props;\r\n  return (\r\n    <div className=\"repository\">\r\n      <div className=\"repository-header\">\r\n        <IconItem\r\n          icon={repository.fork ? IconNames.GIT_BRANCH : IconNames.GIT_REPO}\r\n          text={repository.name}\r\n          link={repository.html_url}\r\n        />\r\n        {repository.language && (\r\n          <div className=\"repository-tag\">\r\n            <IconItem icon={IconNames.CODE} text={repository.language} />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <i>{repository.description}</i>\r\n      </div>\r\n      <div className=\"repository-footer\">\r\n        {repository.stargazers_count !== 0 && <IconItem icon={IconNames.STAR} text={repository.stargazers_count} />}\r\n        {repository.forks !== 0 && <IconItem icon={IconNames.GIT_BRANCH} text={repository.forks} />}\r\n        {repository.open_issues !== 0 && <IconItem icon={IconNames.ISSUE} text={repository.open_issues} />}\r\n        <div className=\"repository-footer-right\">\r\n          <Tooltip content={repository.updated_at} boundary=\"viewport\" position={Position.TOP}>\r\n            <IconItem icon={IconNames.UPDATED} text={new Date(repository.updated_at).toLocaleDateString()} />\r\n          </Tooltip>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RepositoryView;\r\n","import { Sorting } from '../../constants/Sorting';\r\nimport { IconNames, IconName } from '@blueprintjs/icons';\r\n\r\nconst sortingDisplayText = (sorting: Sorting) => {\r\n  let text: string;\r\n  switch (sorting) {\r\n    case Sorting.Alphabetical:\r\n      text = 'Alphabetically';\r\n      break;\r\n    case Sorting.ByStars:\r\n      text = 'By stars';\r\n      break;\r\n    case Sorting.ByUpdateDate:\r\n      text = 'Last updated';\r\n      break;\r\n    default:\r\n      text = '?';\r\n      break;\r\n  }\r\n  return text;\r\n};\r\n\r\nconst sortingIconName = (sorting: Sorting) => {\r\n  let icon: IconName;\r\n  switch (sorting) {\r\n    case Sorting.Alphabetical:\r\n      icon = IconNames.SORT_ALPHABETICAL;\r\n      break;\r\n    case Sorting.ByStars:\r\n      icon = IconNames.SORT_NUMERICAL_DESC;\r\n      break;\r\n    case Sorting.ByUpdateDate:\r\n      icon = IconNames.SORT_DESC;\r\n      break;\r\n    default:\r\n      icon = IconNames.SORT_DESC;\r\n      break;\r\n  }\r\n  return icon;\r\n};\r\n\r\nexport { sortingDisplayText, sortingIconName };\r\n","import React from 'react';\r\nimport { Sorting } from '../../constants/Sorting';\r\nimport { MenuItem } from '@blueprintjs/core';\r\nimport { sortingDisplayText, sortingIconName } from './helpers';\r\n\r\ninterface SortingOptionProps {\r\n  sorting: Sorting;\r\n  handler: Function;\r\n}\r\n\r\nfunction SortingOption(props: SortingOptionProps) {\r\n  const { sorting, handler } = props;\r\n  return <MenuItem text={sortingDisplayText(sorting)} icon={sortingIconName(sorting)} onClick={handler(sorting)} />;\r\n}\r\n\r\nexport default SortingOption;\r\n","import React from 'react';\r\nimport { Sorting } from '../../constants/Sorting';\r\nimport { Menu } from '@blueprintjs/core';\r\nimport SortingOption from './SortingOption';\r\n\r\ninterface SortingOptionProps {\r\n  handler: Function;\r\n}\r\n\r\nfunction SortingOptions(props: SortingOptionProps) {\r\n  const { handler } = props;\r\n  return (\r\n    <Menu>\r\n      <SortingOption sorting={Sorting.Alphabetical} handler={handler} />\r\n      <SortingOption sorting={Sorting.ByStars} handler={handler} />\r\n      <SortingOption sorting={Sorting.ByUpdateDate} handler={handler} />\r\n    </Menu>\r\n  );\r\n}\r\n\r\nexport default SortingOptions;\r\n","import React, { useState } from 'react';\r\nimport { Card, Elevation, Button, HTMLTable, ButtonGroup, Popover, Position } from '@blueprintjs/core';\r\nimport { Repository } from '../../models/Repository';\r\nimport RepositoryView from './RepositoryView';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Sorting } from '../../constants/Sorting';\r\nimport { changeSorting } from '../../actions/thunkActionCreators';\r\nimport { sortingDisplayText, sortingIconName } from './helpers';\r\nimport SortingOptions from './SortingOptions';\r\n\r\ninterface RepositoryListProps {\r\n  repositories: Repository[];\r\n  sorting: Sorting;\r\n}\r\n\r\nfunction RepositoryList(props: RepositoryListProps) {\r\n  const { repositories, sorting } = props;\r\n  const dispatch = useDispatch();\r\n  const [viewMode, setViewMode] = useState('tiles');\r\n\r\n  const toggleViewMode = () => {\r\n    setViewMode(viewMode === 'tiles' ? 'table' : 'tiles');\r\n  };\r\n\r\n  const changeSortingHandler = (sorting: Sorting) => () => {\r\n    dispatch(changeSorting(sorting));\r\n  };\r\n\r\n  return (\r\n    repositories.length > 0 && (\r\n      <Card id=\"repository-list\" elevation={Elevation.TWO}>\r\n        <div id=\"repository-list-header\" className=\"clearfix\">\r\n          <span id=\"repository-list-title\">Repositories</span>\r\n          <div id=\"repository-list-controls\">\r\n            <ButtonGroup>\r\n              <Popover\r\n                content={<SortingOptions handler={changeSortingHandler} />}\r\n                position={Position.BOTTOM}\r\n                usePortal={true}\r\n                portalContainer={document.body}\r\n              >\r\n                <Button\r\n                  text={'Sorting: ' + sortingDisplayText(sorting)}\r\n                  icon={sortingIconName(sorting)}\r\n                  rightIcon={IconNames.CARET_DOWN}\r\n                />\r\n              </Popover>\r\n              <Button\r\n                text={viewMode === 'tiles' ? 'View table' : 'View tiles'}\r\n                onClick={toggleViewMode}\r\n                icon={viewMode === 'tiles' ? IconNames.TH : IconNames.GRID_VIEW}\r\n              />\r\n            </ButtonGroup>\r\n          </div>\r\n        </div>\r\n        {viewMode === 'tiles' ? (\r\n          <div id=\"repository-list-cards-container\">\r\n            {repositories.map((repository, index) => (\r\n              <RepositoryView repository={repository} key={index} />\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div id=\"repository-list-table-container\">\r\n            <HTMLTable bordered={true} striped={true}>\r\n              <thead>\r\n                <tr>\r\n                  <th>Repository</th>\r\n                  <th>Description</th>\r\n                  <th>Language</th>\r\n                  <th>Stars</th>\r\n                  <th>Forked</th>\r\n                  <th>Open Issues</th>\r\n                  <th>Last Updated</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {repositories.map((repository, index) => (\r\n                  <tr key={index}>\r\n                    <td>\r\n                      <a href={repository.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        {repository.name}\r\n                      </a>\r\n                    </td>\r\n                    <td>{repository.description}</td>\r\n                    <td>{repository.language}</td>\r\n                    <td>{repository.stargazers_count}</td>\r\n                    <td>{repository.forks}</td>\r\n                    <td>{repository.open_issues}</td>\r\n                    <td>{new Date(repository.updated_at).toLocaleDateString()}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </HTMLTable>\r\n          </div>\r\n        )}\r\n      </Card>\r\n    )\r\n  );\r\n}\r\n\r\nexport default RepositoryList;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../models/AppState';\r\nimport UserSummary from './UserSummary';\r\nimport RepositoriesSummary from './RepositoriesSummary';\r\nimport RepositoryList from './repostory_list/RepositoryList';\r\nimport { NonIdealState, Card, Elevation, Spinner, Intent } from '@blueprintjs/core';\r\nimport { IconNames } from '@blueprintjs/icons';\r\n\r\nfunction Summary() {\r\n  const user = useSelector((state: AppState) => state.user);\r\n  const repositories = useSelector((state: AppState) => state.repositories);\r\n  const sorting = useSelector((state: AppState) => state.sorting);\r\n  const languageStatistics = useSelector((state: AppState) => state.language_statistics);\r\n  const starsStatistics = useSelector((state: AppState) => state.stars_statistics);\r\n  const loading_state = useSelector((state: AppState) => state.loading_state);\r\n  return user.login !== '' ? (\r\n    <>\r\n      <UserSummary user={user} />\r\n      {loading_state ? (\r\n        <Card elevation={Elevation.TWO}>\r\n          <Spinner intent={Intent.PRIMARY} />\r\n        </Card>\r\n      ) : (\r\n        <>\r\n          {repositories.length !== 0 ? (\r\n            <div>\r\n              <RepositoriesSummary languageStatistics={languageStatistics} starsStatistics={starsStatistics} />\r\n              <RepositoryList repositories={repositories} sorting={sorting} />\r\n            </div>\r\n          ) : (\r\n            <NonIdealState\r\n              icon={IconNames.DISABLE}\r\n              title=\"No repositories.\"\r\n              description=\"The user has no public repositories.\"\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  ) : (\r\n    <NonIdealState\r\n      icon={IconNames.DISABLE}\r\n      title=\"No user selected.\"\r\n      description=\"Enter a Github user name in the search bar above!\"\r\n    />\r\n  );\r\n}\r\n\r\nexport default Summary;\r\n","import React, { useState } from 'react';\r\nimport { InputGroup, Intent, Tooltip, Button, AnchorButton } from '@blueprintjs/core';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from '../models/AppState';\r\nimport { searchUser } from '../actions/thunkActionCreators';\r\n\r\nfunction Navbar() {\r\n  const dispatch = useDispatch();\r\n  const [userName, setUserName] = useState('');\r\n  const currentUserName = useSelector((state: AppState) => state.user.login);\r\n\r\n  const searchHandler = () => {\r\n    if (userName !== '' && userName !== currentUserName) {\r\n      dispatch(searchUser(userName));\r\n    }\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    setUserName('');\r\n  };\r\n\r\n  return (\r\n    <div id=\"navbar\">\r\n      <div className=\"viewport\">\r\n        <div id=\"navbar-title\">Github Repo Summary</div>\r\n        <div>\r\n          <InputGroup\r\n            placeholder=\"Github user name\"\r\n            rightElement={\r\n              <>\r\n                <Tooltip content=\"Search\">\r\n                  <Button icon={IconNames.SEARCH} intent={Intent.PRIMARY} minimal={true} onClick={searchHandler} />\r\n                </Tooltip>\r\n                <Tooltip content=\"Clear\">\r\n                  <Button icon={IconNames.TRASH} intent={Intent.DANGER} minimal={true} onClick={resetHandler} />\r\n                </Tooltip>\r\n              </>\r\n            }\r\n            value={userName}\r\n            onChange={(event: { target: any }) => setUserName(event.target.value)}\r\n            onKeyPress={event => {\r\n              if (event.charCode === 13) {\r\n                searchHandler();\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n        <div id=\"navbar-right\">\r\n          <AnchorButton\r\n            icon=\"git-repo\"\r\n            text=\"Github\"\r\n            href=\"https://github.com/alex-c/github-repo-summary\"\r\n            target=\"_blank\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useState } from 'react';\r\nimport { Icon, TagInput, Tag, Intent, Tooltip, Button } from '@blueprintjs/core';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from '../models/AppState';\r\nimport { setFavorites } from '../actions/actionCreators';\r\nimport { removeUserFromFavorites, searchUser, addUserToFavoritesIfExists } from '../actions/thunkActionCreators';\r\n\r\nfunction Favorites() {\r\n  const favorites = useSelector((state: AppState) => state.favorites);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const loadFavoriteHandler = (name: string) => () => {\r\n    dispatch(searchUser(name));\r\n  };\r\n\r\n  const toggleEditModeHandler = () => {\r\n    setEditMode(!editMode);\r\n  };\r\n\r\n  const removeFavoriteHandler = (name: string) => {\r\n    if (favorites.length === 1 && favorites.map(f => f.name).includes(name)) {\r\n      setEditMode(false);\r\n    }\r\n    dispatch(removeUserFromFavorites({ name }));\r\n  };\r\n\r\n  const removeAllFavoritesHandler = () => {\r\n    setEditMode(false);\r\n    dispatch(setFavorites([]));\r\n  };\r\n\r\n  const addFavoriteHandler = (values: string[]) => {\r\n    const newUser = values.shift();\r\n    if (newUser) {\r\n      dispatch(addUserToFavoritesIfExists(newUser));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {favorites.length > 0 && (\r\n        <div id=\"favorites\">\r\n          {editMode ? (\r\n            <TagInput\r\n              leftIcon={IconNames.STAR}\r\n              values={favorites.map(favorite => favorite.name)}\r\n              onRemove={removeFavoriteHandler}\r\n              onAdd={addFavoriteHandler}\r\n              addOnPaste={true}\r\n              rightElement={\r\n                <>\r\n                  <Tooltip content=\"Remove all\">\r\n                    <Button\r\n                      icon={IconNames.TRASH}\r\n                      intent={Intent.DANGER}\r\n                      minimal={true}\r\n                      onClick={removeAllFavoritesHandler}\r\n                    />\r\n                  </Tooltip>\r\n                  <Tooltip content=\"Done editing\">\r\n                    <Button\r\n                      icon={IconNames.TICK}\r\n                      intent={Intent.SUCCESS}\r\n                      minimal={true}\r\n                      onClick={toggleEditModeHandler}\r\n                    />\r\n                  </Tooltip>\r\n                </>\r\n              }\r\n            />\r\n          ) : (\r\n            <>\r\n              <div id=\"favorites-controls\">\r\n                <Tooltip content=\"Edit\">\r\n                  <Icon icon={IconNames.EDIT} onClick={toggleEditModeHandler} />\r\n                </Tooltip>\r\n              </div>\r\n              {favorites.map((favorite, index) => (\r\n                <Tag\r\n                  intent={Intent.PRIMARY}\r\n                  minimal={true}\r\n                  interactive={true}\r\n                  key={index}\r\n                  onClick={loadFavoriteHandler(favorite.name)}\r\n                >\r\n                  {favorite.name}\r\n                </Tag>\r\n              ))}\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Favorites;\r\n","import React from 'react';\r\nimport Summary from './Summary';\r\nimport Navbar from './Navbar';\r\nimport Favorites from './Favorites';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <main className=\"viewport\">\r\n        <Favorites />\r\n        <Summary />\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// Import Redux\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducer';\r\n\r\n// Import Blueprint\r\nimport { FocusStyleManager } from '@blueprintjs/core';\r\n\r\n// Set up App\r\nimport App from './components/App';\r\nimport './index.scss';\r\nimport localStorageKeys from './constants/LocalStorageKeys';\r\nimport { Sorting } from './constants/Sorting';\r\n\r\n// Set up Blueprint\r\nFocusStyleManager.onlyShowFocusOnTabs();\r\n\r\n// Set up store\r\nconst initialState = {\r\n  user: {\r\n    login: '',\r\n  },\r\n  favorites: JSON.parse(localStorage.getItem(localStorageKeys.favorites)) || [],\r\n  loading_state: false,\r\n  language_statistics: null,\r\n  stars_statistics: null,\r\n  repositories: [],\r\n  sorting: Sorting.Alphabetical,\r\n};\r\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk));\r\n\r\n// Render!\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}