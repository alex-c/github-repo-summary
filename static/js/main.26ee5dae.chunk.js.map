{"version":3,"sources":["actions/actionTypeKeys.ts","constants/Sorting.ts","constants/LocalStorageKeys.ts","reducer.ts","components/IconItem.tsx","actions/helpers/sortRepositories.ts","actions/actionCreators.ts","services/api.js","actions/helpers/calculateStats.ts","actions/helpers/showErrorToast.ts","actions/helpers/createToaster.ts","actions/thunkActionCreators.ts","components/UserProfile.tsx","components/Statistics.tsx","components/repostory_list/helpers.ts","components/repostory_list/SortingOption.tsx","components/repostory_list/SortingOptions.tsx","components/repostory_list/RepositoryView.tsx","components/repostory_list/PaginationControls.tsx","components/repostory_list/RepositoryList.tsx","components/Summary.tsx","components/Navbar.tsx","components/Favorites.tsx","components/App.tsx","index.tsx"],"names":["ActionTypeKeys","Sorting","localStorageKeys","favorites","initialState","user","login","name","bio","location","company","blog","email","avatar_url","html_url","public_repos","public_gists","followers","following","repos_url","loading_state","language_statistics","stars_statistics","repositories","sorting","Alphabetical","pagination","items_per_page","pages","current_page","IconItem","props","icon","text","link","react_default","a","createElement","Fragment","components","href","target","rel","sortRepositories","sortedRepositories","slice","sort","r1","r2","toLowerCase","ByStars","stargazers_count","ByUpdateDate","Date","updated_at","setRepositories","type","SET_REPOSITORIES","setLoadingState","SET_LOADING_STATE","setFavorites","SET_FAVORITES","setPagination","SET_PAGINATION","api","getUser","_getUser","Object","asyncToGenerator","regenerator_default","mark","_callee","userName","wrap","_context","prev","next","axios","get","concat","sent","abrupt","data","stop","_x","apply","this","arguments","getUserRepositories","url","page","roundStarsStat","stars","Math","round","errorToaster","Toaster","create","className","position","Position","TOP_RIGHT","showErrorToast","message","length","undefined","IconNames","ERROR","show","intent","Intent","DANGER","timeout","searchUser","dispatch","then","result","SET_USER","numberOfRepos","promises","push","Promise","all","values","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","value","toConsumableArray","err","return","processLoadedRepos","catch","error","includes","SEARCH","LOCK","repoCount","languages","starsStatistics","max_stars_repo","total_stars","average_stars","median_stars","maxStars","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","repository","language","find","count","_iterator2","sortedRepos","repoMedian","floor","ceil","calculateMedianStars","unknownLanguage","language1","language2","languageStatistics","SET_STATISTICS","setStatistics","language_count","repository_count","loadRepositories","changeSorting","getState","SET_SORTING","setSorting","_getState2","addUserToFavorites","map","favorite","newFavorites","removeUserFromFavorites","filter","addUserToFavoritesIfExists","UserProfile","useSelector","state","useDispatch","userIsFavorite","id","elevation","Elevation","TWO","src","alt","STAR","STAR_EMPTY","onClick","components_IconItem","MAP_MARKER","OFFICE","ENVELOPE","LINK","GIT_BRANCH","DOCUMENT","USER","Statistics","PRIMARY","CODE","react_apexcharts_min_default","width","options","labels","plotOptions","pie","expandOnClick","responsive","breakpoint","chart","legend","series","sortingDisplayText","sortingIconName","SORT_ALPHABETICAL","SORT_NUMERICAL_DESC","SORT_DESC","paginateRepositories","pageLimit","SortingOption","handler","SortingOptions","repostory_list_SortingOption","RepositoryView","fork","GIT_REPO","description","forks","open_issues","ISSUE","content","boundary","TOP","UPDATED","toLocaleDateString","PaginationControls","_props$pagination","changePageHandler","DOUBLE_CHEVRON_LEFT","disabled","CHEVRON_LEFT","active","CHEVRON_RIGHT","DOUBLE_CHEVRON_RIGHT","RepositoryList","_useState","useState","_useState2","slicedToArray","viewMode","setViewMode","paginatedRepositories","repostory_list_SortingOptions","BOTTOM","usePortal","portalContainer","document","body","rightIcon","CARET_DOWN","TH","GRID_VIEW","index","repostory_list_RepositoryView","key","bordered","striped","repostory_list_PaginationControls","Summary","components_UserProfile","components_Statistics","repostory_list_RepositoryList","DISABLE","title","Navbar","esm_slicedToArray","setUserName","currentUserName","searchHandler","placeholder","rightElement","minimal","TRASH","onChange","event","onKeyPress","charCode","Favorites","editMode","setEditMode","toggleEditModeHandler","leftIcon","onRemove","f","onAdd","newUser","shift","addOnPaste","TICK","SUCCESS","EDIT","interactive","App","components_Navbar","components_Favorites","components_Summary","FocusStyleManager","onlyShowFocusOnTabs","JSON","parse","localStorage","getItem","store","createStore","action","objectSpread2","setItem","stringify","applyMiddleware","thunk","ReactDOM","render","es","components_App","getElementById"],"mappings":"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","file":"static/js/main.26ee5dae.chunk.js","sourcesContent":["export enum ActionTypeKeys {\r\n    SET_USER = \"SET_USER\",\r\n    SET_REPOSITORIES = \"SET_REPOSITORIES\",\r\n    SET_STATISTICS = \"SET_STATISTICS\",\r\n    SET_SORTING = \"SET_SORTING\",\r\n    SET_LOADING_STATE = \"SET_LOADING_STATE\",\r\n    SET_FAVORITES = \"SET_FAVORITES\",\r\n    SET_PAGINATION = \"SET_PAGINATION\",\r\n    OTHER_ACTION = \"__any_other_action_type__\"\r\n}","export enum Sorting {\r\n  Alphabetical,\r\n  ByStars,\r\n  ByUpdateDate\r\n}","const localStorageKeys = { favorites: 'GithubRepoSummary.favorites' };\r\n\r\nexport default localStorageKeys;\r\n","import { ActionTypes } from './actions/actionTypes';\r\nimport { ActionTypeKeys } from './actions/actionTypeKeys';\r\nimport { AppState } from './models/AppState';\r\nimport { Sorting } from './constants/Sorting';\r\nimport localStorageKeys from './constants/LocalStorageKeys';\r\n\r\nconst initialState: AppState = {\r\n  user: {\r\n    login: '',\r\n    name: '',\r\n    bio: '',\r\n    location: '',\r\n    company: '',\r\n    blog: '',\r\n    email: '',\r\n    avatar_url: '',\r\n    html_url: '',\r\n    public_repos: 0,\r\n    public_gists: 0,\r\n    followers: 0,\r\n    following: 0,\r\n    repos_url: '',\r\n  },\r\n  favorites: [],\r\n  loading_state: false,\r\n  language_statistics: null,\r\n  stars_statistics: null,\r\n  repositories: [],\r\n  sorting: Sorting.Alphabetical,\r\n  pagination: {\r\n    items_per_page: 25,\r\n    pages: 1,\r\n    current_page: 0,\r\n  },\r\n};\r\n\r\nexport default function reducer(state: AppState = initialState, action: ActionTypes) {\r\n  switch (action.type) {\r\n    case ActionTypeKeys.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n    case ActionTypeKeys.SET_REPOSITORIES:\r\n      return {\r\n        ...state,\r\n        repositories: action.repositories,\r\n      };\r\n    case ActionTypeKeys.SET_STATISTICS:\r\n      return {\r\n        ...state,\r\n        language_statistics: action.languageStatistics,\r\n        stars_statistics: action.starsStatistics,\r\n      };\r\n    case ActionTypeKeys.SET_SORTING:\r\n      return {\r\n        ...state,\r\n        sorting: action.sorting,\r\n      };\r\n    case ActionTypeKeys.SET_LOADING_STATE:\r\n      return {\r\n        ...state,\r\n        loading_state: action.loading_state,\r\n      };\r\n    case ActionTypeKeys.SET_FAVORITES:\r\n      localStorage.setItem(localStorageKeys.favorites, JSON.stringify(action.favorites));\r\n      return {\r\n        ...state,\r\n        favorites: action.favorites,\r\n      };\r\n    case ActionTypeKeys.SET_PAGINATION:\r\n      return {\r\n        ...state,\r\n        pagination: action.pagination,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Icon, IconName } from '@blueprintjs/core';\r\n\r\ninterface IconItemProps {\r\n  icon: IconName;\r\n  text: string | number;\r\n  link?: string;\r\n}\r\n\r\nfunction IconItem(props: IconItemProps) {\r\n  let { icon, text, link } = props;\r\n  return (\r\n    <>\r\n      <Icon icon={icon} />\r\n      {(link && (\r\n        <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {text}\r\n        </a>\r\n      )) || <>{text}</>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default IconItem;\r\n","import { Repository } from '../../models/Repository';\r\nimport { Sorting } from '../../constants/Sorting';\r\n\r\nconst sortRepositories = (repositories: Repository[], sorting: Sorting) => {\r\n  let sortedRepositories = repositories.slice();\r\n  switch (sorting) {\r\n    case Sorting.Alphabetical:\r\n      sortedRepositories = sortedRepositories.sort((r1, r2) =>\r\n        r1.name.toLowerCase() < r2.name.toLowerCase() ? -1 : r1.name.toLowerCase() > r2.name.toLowerCase() ? 1 : 0,\r\n      );\r\n      break;\r\n    case Sorting.ByStars:\r\n      sortedRepositories = sortedRepositories.sort((r1, r2) => r2.stargazers_count - r1.stargazers_count);\r\n      break;\r\n    case Sorting.ByUpdateDate:\r\n      sortedRepositories = sortedRepositories.sort((r1, r2) =>\r\n        new Date(r1.updated_at) <= new Date(r2.updated_at) ? 1 : -1,\r\n      );\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return sortedRepositories;\r\n};\r\n\r\nexport default sortRepositories;\r\n","import { User } from '../models/User';\r\nimport {\r\n  SetUserAction,\r\n  SetRepositoriesAction,\r\n  SetSortingAction,\r\n  SetStatisticsAction,\r\n  SetLoadingStateAction,\r\n  SetFavoritesAction,\r\n  SetPaginationAction,\r\n} from './actions';\r\nimport { ActionTypeKeys } from './actionTypeKeys';\r\nimport { Repository } from '../models/Repository';\r\nimport { Sorting } from '../constants/Sorting';\r\nimport { LanguageStatistics } from '../models/LanguageStatistics';\r\nimport { StarsStatistics } from '../models/StarsStatistics';\r\nimport { Favorite } from '../models/Favorite';\r\nimport { Pagination } from '../models/Pagination';\r\n\r\nconst setUser = (user: User): SetUserAction => {\r\n  return {\r\n    type: ActionTypeKeys.SET_USER,\r\n    user,\r\n  };\r\n};\r\n\r\nconst setRepositories = (repositories: Repository[]): SetRepositoriesAction => {\r\n  return {\r\n    type: ActionTypeKeys.SET_REPOSITORIES,\r\n    repositories,\r\n  };\r\n};\r\n\r\nconst setStatistics = (\r\n  languageStatistics: LanguageStatistics,\r\n  starsStatistics: StarsStatistics,\r\n): SetStatisticsAction => {\r\n  return {\r\n    type: ActionTypeKeys.SET_STATISTICS,\r\n    languageStatistics,\r\n    starsStatistics,\r\n  };\r\n};\r\n\r\nconst setSorting = (sorting: Sorting): SetSortingAction => {\r\n  return {\r\n    type: ActionTypeKeys.SET_SORTING,\r\n    sorting,\r\n  };\r\n};\r\n\r\nconst setLoadingState = (loading_state: boolean): SetLoadingStateAction => {\r\n  return {\r\n    type: ActionTypeKeys.SET_LOADING_STATE,\r\n    loading_state,\r\n  };\r\n};\r\n\r\nconst setFavorites = (favorites: Favorite[]): SetFavoritesAction => {\r\n  return {\r\n    type: ActionTypeKeys.SET_FAVORITES,\r\n    favorites,\r\n  };\r\n};\r\n\r\nconst setPagination = (pagination: Pagination): SetPaginationAction => {\r\n  return {\r\n    type: ActionTypeKeys.SET_PAGINATION,\r\n    pagination,\r\n  };\r\n};\r\n\r\nexport { setUser, setRepositories, setStatistics, setSorting, setLoadingState, setFavorites, setPagination };\r\n","import axios from 'axios';\r\n\r\nexport default {\r\n  getUser: async userName => {\r\n    let user = await axios.get(`https://api.github.com/users/${userName}`);\r\n    return user.data;\r\n  },\r\n\r\n  getUserRepositories: (url, page) => {\r\n    return axios.get(`${url}?page=${page}&per_page=100`);\r\n  },\r\n};\r\n","import { Repository } from '../../models/Repository';\r\n\r\nconst roundStarsStat = (stars: number) => Math.round(stars * 10) / 10;\r\n\r\nconst calculateMeanStars = (stars: number, repoCount: number) => roundStarsStat(stars / repoCount);\r\n\r\nconst calculateMedianStars = (repositories: Repository[]) => {\r\n  const sortedRepos = repositories.slice().sort((r1, r2) => r2.stargazers_count - r1.stargazers_count);\r\n  const repoMedian = sortedRepos.length === 1 ? 0 : sortedRepos.length / 2;\r\n  if (sortedRepos.length % 2 === 1) {\r\n    return roundStarsStat(\r\n      (sortedRepos[Math.floor(repoMedian)].stargazers_count + sortedRepos[Math.ceil(repoMedian)].stargazers_count) / 2,\r\n    );\r\n  } else {\r\n    return sortedRepos[repoMedian].stargazers_count;\r\n  }\r\n};\r\n\r\nexport { calculateMeanStars, calculateMedianStars };\r\n","import { IconName, Intent } from '@blueprintjs/core';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { createToaster } from './createToaster';\r\n\r\nconst errorToaster = createToaster();\r\n\r\nconst showErrorToast = (message: string, icon: IconName = IconNames.ERROR) => {\r\n  errorToaster.show({\r\n    message,\r\n    icon,\r\n    intent: Intent.DANGER,\r\n    timeout: 1500,\r\n  });\r\n};\r\n\r\nexport default showErrorToast;\r\n","import { Toaster, Position } from '@blueprintjs/core';\r\n\r\nexport const createToaster = () =>\r\n  Toaster.create({\r\n    className: 'error-toaster',\r\n    position: Position.TOP_RIGHT,\r\n  });\r\n","import { Sorting } from '../constants/Sorting';\r\nimport sortRepositories from './helpers/sortRepositories';\r\nimport { Repository } from '../models/Repository';\r\nimport {\r\n  setRepositories,\r\n  setSorting,\r\n  setLoadingState,\r\n  setFavorites,\r\n  setUser,\r\n  setStatistics,\r\n  setPagination,\r\n} from './actionCreators';\r\nimport { Favorite } from '../models/Favorite';\r\nimport api from '../services/api';\r\nimport { Language } from '../models/Language';\r\nimport { StarsStatistics } from '../models/StarsStatistics';\r\nimport { calculateMeanStars, calculateMedianStars } from './helpers/calculateStats';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport showErrorToast from './helpers/showErrorToast';\r\n\r\nconst searchUser = (userName: string) => dispatch => {\r\n  api\r\n    .getUser(userName)\r\n    .then(result => {\r\n      dispatch(setUser(result));\r\n      dispatch(setLoadingState(true));\r\n      dispatch(setRepositories([]));\r\n      let numberOfRepos = result.public_repos;\r\n      if (numberOfRepos > 0) {\r\n        let page = 1;\r\n        let promises: object[] = [];\r\n        while (numberOfRepos > 0) {\r\n          promises.push(api.getUserRepositories(result.repos_url, page));\r\n          numberOfRepos -= 100;\r\n          page++;\r\n        }\r\n        Promise.all(promises).then((values: any[]) => {\r\n          let repositories: Repository[] = [];\r\n          for (let value of values) {\r\n            repositories.push(...value.data);\r\n          }\r\n          dispatch(processLoadedRepos(repositories));\r\n        });\r\n      } else {\r\n        dispatch(setLoadingState(false));\r\n      }\r\n    })\r\n    .catch((error: Error) => {\r\n      if (error.message.includes('404')) {\r\n        showErrorToast(`User \"${userName}\" could not be found!`, IconNames.SEARCH);\r\n      } else if (error.message.includes('403')) {\r\n        showErrorToast('Rate limit reached! Try again later.', IconNames.LOCK);\r\n      } else {\r\n        showErrorToast('An error occured while attempting to retrieve user info from Github.');\r\n      }\r\n    });\r\n};\r\n\r\nconst processLoadedRepos = (repositories: Repository[]) => dispatch => {\r\n  const languages: Language[] = [];\r\n  const starsStatistics: StarsStatistics = {\r\n    max_stars_repo: repositories[0],\r\n    total_stars: 0,\r\n    average_stars: 0,\r\n    median_stars: 0,\r\n  };\r\n\r\n  // Compute repositories stats\r\n  let maxStars = starsStatistics.max_stars_repo.stargazers_count;\r\n  for (let repository of repositories) {\r\n    // Find unique languages and count the number of repos for each\r\n    const language = languages.find(language => language.name === repository.language);\r\n    if (language === undefined) {\r\n      languages.push({\r\n        name: repository.language,\r\n        count: 1,\r\n      });\r\n    } else {\r\n      language.count++;\r\n    }\r\n\r\n    // Find repo with most stars and count total stars\r\n    starsStatistics.total_stars += repository.stargazers_count;\r\n    if (repository.stargazers_count > maxStars) {\r\n      starsStatistics.max_stars_repo = repository;\r\n      maxStars = repository.stargazers_count;\r\n    }\r\n  }\r\n\r\n  // Calculate average and median stars\r\n  starsStatistics.average_stars = calculateMeanStars(starsStatistics.total_stars, repositories.length);\r\n  starsStatistics.median_stars = calculateMedianStars(repositories);\r\n\r\n  // Handle the `null` language\r\n  const unknownLanguage = languages.find(language => language.name === null);\r\n  if (unknownLanguage !== undefined) {\r\n    unknownLanguage.name = 'Unknown';\r\n  }\r\n\r\n  // Sort by most used language\r\n  languages.sort((language1, language2) => language2.count - language1.count);\r\n\r\n  // Dispatch full repo list and language stats\r\n  dispatch(\r\n    setStatistics(\r\n      { languages, language_count: languages.length, repository_count: repositories.length },\r\n      starsStatistics,\r\n    ),\r\n  );\r\n  dispatch(loadRepositories(repositories));\r\n};\r\n\r\nconst changeSorting = (sorting: Sorting) => (dispatch, getState) => {\r\n  dispatch(setSorting(sorting));\r\n  const { repositories } = getState();\r\n  const sortedRepositories = sortRepositories(repositories, sorting);\r\n  dispatch(setRepositories(sortedRepositories));\r\n};\r\n\r\nconst loadRepositories = (repositories: Repository[]) => (dispatch, getState) => {\r\n  const { sorting, pagination } = getState();\r\n  const sortedRepositories = sortRepositories(repositories, sorting);\r\n  dispatch(setRepositories(sortedRepositories));\r\n  dispatch(\r\n    setPagination({\r\n      items_per_page: pagination.items_per_page,\r\n      pages: Math.ceil(repositories.length / pagination.items_per_page),\r\n      current_page: 1,\r\n    }),\r\n  );\r\n  dispatch(setLoadingState(false));\r\n};\r\n\r\nconst addUserToFavorites = (user: Favorite) => (dispatch, getState) => {\r\n  const { favorites } = getState();\r\n  if (!favorites.map(favorite => favorite.name).includes(user.name)) {\r\n    const newFavorites: Favorite[] = favorites.slice();\r\n    newFavorites.push(user);\r\n    dispatch(setFavorites(newFavorites));\r\n  }\r\n};\r\n\r\nconst removeUserFromFavorites = (user: Favorite) => (dispatch, getState) => {\r\n  const { favorites } = getState();\r\n  dispatch(setFavorites(favorites.filter(favorite => favorite.name !== user.name)));\r\n};\r\n\r\nconst addUserToFavoritesIfExists = (userName: string) => (dispatch, getState) => {\r\n  api\r\n    .getUser(userName)\r\n    .then(result => {\r\n      dispatch(addUserToFavorites({ name: result.login }));\r\n    })\r\n    .catch(error => {\r\n      if (error.message.includes('404')) {\r\n        showErrorToast(`User \"${userName}\" could not be found!`, IconNames.SEARCH);\r\n      } else if (error.message.includes('403')) {\r\n        showErrorToast(`Rate limit reached! Can't check whether user \"${userName}\" exists.`, IconNames.LOCK);\r\n      } else {\r\n        showErrorToast('An error occured while attempting to retrieve user info from Github.');\r\n      }\r\n    });\r\n};\r\n\r\nexport {\r\n  searchUser,\r\n  processLoadedRepos,\r\n  changeSorting,\r\n  loadRepositories,\r\n  addUserToFavorites,\r\n  removeUserFromFavorites,\r\n  addUserToFavoritesIfExists,\r\n};\r\n","import React from 'react';\r\nimport { Card, Elevation, Tag, Icon } from '@blueprintjs/core';\r\nimport { User } from '../models/User';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport IconItem from './IconItem';\r\nimport { addUserToFavorites, removeUserFromFavorites } from '../actions/thunkActionCreators';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppState } from '../models/AppState';\r\n\r\ninterface UserProfileProps {\r\n  user: User;\r\n}\r\n\r\nfunction UserProfile(props: UserProfileProps) {\r\n  const favorites = useSelector((state: AppState) => state.favorites);\r\n  const { user } = props;\r\n  const dispatch = useDispatch();\r\n\r\n  const userIsFavorite = (): boolean => favorites.map(favorite => favorite.name).includes(user.login);\r\n\r\n  const toggleFavoriteHandler = () => {\r\n    if (userIsFavorite()) {\r\n      dispatch(removeUserFromFavorites({ name: user.login }));\r\n    } else {\r\n      dispatch(addUserToFavorites({ name: user.login }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card id=\"user-summary\" elevation={Elevation.TWO}>\r\n      <div id=\"avatar\">\r\n        <img src={user.avatar_url} alt=\"Github user avatar\" />\r\n      </div>\r\n      <div id=\"favorite\">\r\n        <Icon icon={userIsFavorite() ? IconNames.STAR : IconNames.STAR_EMPTY} onClick={toggleFavoriteHandler} />\r\n      </div>\r\n      <p>\r\n        <b>{user.name}</b> /&nbsp;\r\n        <a href={user.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {user.login}\r\n        </a>\r\n      </p>\r\n      <p>{user.bio}</p>\r\n      <p>\r\n        {user.location && <IconItem icon={IconNames.MAP_MARKER} text={user.location} />}\r\n        {user.company && <IconItem icon={IconNames.OFFICE} text={user.company} />}\r\n        {user.email && <IconItem icon={IconNames.ENVELOPE} text={user.email} />}\r\n        {user.blog !== '' && <IconItem icon={IconNames.LINK} text={user.blog} link={user.blog} />}\r\n      </p>\r\n      <div>\r\n        <Tag icon={IconNames.GIT_BRANCH}>Repositories: {user.public_repos}</Tag>\r\n        <Tag icon={IconNames.DOCUMENT}>Gists: {user.public_gists}</Tag>\r\n        <Tag icon={IconNames.USER}>Followers: {user.followers}</Tag>\r\n        <Tag icon={IconNames.USER}>Following: {user.following}</Tag>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default UserProfile;\r\n","import React from 'react';\r\nimport { Card, Elevation, Callout, Intent } from '@blueprintjs/core';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport { LanguageStatistics } from '../models/LanguageStatistics';\r\nimport { StarsStatistics } from '../models/StarsStatistics';\r\nimport { IconNames } from '@blueprintjs/icons';\r\n\r\ninterface StatisticsProps {\r\n  languageStatistics: LanguageStatistics;\r\n  starsStatistics: StarsStatistics;\r\n}\r\n\r\nfunction Statistics(props: StatisticsProps) {\r\n  let { languageStatistics, starsStatistics } = props;\r\n  return (\r\n    <Card id=\"repositories-summary\" elevation={Elevation.TWO}>\r\n      <div className=\"flex-card-section\">\r\n        <div>\r\n          <Callout intent={Intent.PRIMARY} icon={IconNames.CODE}>\r\n            {languageStatistics.language_count} languages used over {languageStatistics.repository_count} repositories.\r\n          </Callout>\r\n          <ReactApexChart\r\n            type=\"pie\"\r\n            width=\"500\"\r\n            options={{\r\n              labels: languageStatistics.languages.map(language => language.name),\r\n              plotOptions: {\r\n                pie: {\r\n                  expandOnClick: false,\r\n                },\r\n              },\r\n              responsive: [\r\n                {\r\n                  breakpoint: 500,\r\n                  options: {\r\n                    chart: {\r\n                      width: 400,\r\n                    },\r\n                    legend: {\r\n                      position: 'bottom',\r\n                    },\r\n                  },\r\n                },\r\n                {\r\n                  breakpoint: 400,\r\n                  options: {\r\n                    chart: {\r\n                      width: 300,\r\n                    },\r\n                    legend: {\r\n                      position: 'bottom',\r\n                    },\r\n                  },\r\n                },\r\n              ],\r\n            }}\r\n            series={languageStatistics.languages.map(language => language.count)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Callout intent={Intent.PRIMARY} icon={IconNames.STAR}>\r\n            {starsStatistics.total_stars} stars over {languageStatistics.repository_count} repositories.\r\n          </Callout>\r\n          <div className=\"padded-content\">\r\n            <p>\r\n              Max stars:&nbsp;\r\n              <a href={starsStatistics.max_stars_repo.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {starsStatistics.max_stars_repo.name}\r\n              </a>\r\n              &nbsp;({starsStatistics.max_stars_repo.stargazers_count})\r\n            </p>\r\n            <p>Average stars: {starsStatistics.average_stars}</p>\r\n            <p>Median stars: {starsStatistics.median_stars}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Statistics;\r\n","import { Sorting } from '../../constants/Sorting';\r\nimport { IconNames, IconName } from '@blueprintjs/icons';\r\nimport { Repository } from '../../models/Repository';\r\nimport { Pagination } from '../../models/Pagination';\r\n\r\nconst sortingDisplayText = (sorting: Sorting): string => {\r\n  let text: string;\r\n  switch (sorting) {\r\n    case Sorting.Alphabetical:\r\n      text = 'Alphabetically';\r\n      break;\r\n    case Sorting.ByStars:\r\n      text = 'By stars';\r\n      break;\r\n    case Sorting.ByUpdateDate:\r\n      text = 'Last updated';\r\n      break;\r\n    default:\r\n      text = '?';\r\n      break;\r\n  }\r\n  return text;\r\n};\r\n\r\nconst sortingIconName = (sorting: Sorting): IconName => {\r\n  let icon: IconName;\r\n  switch (sorting) {\r\n    case Sorting.Alphabetical:\r\n      icon = IconNames.SORT_ALPHABETICAL;\r\n      break;\r\n    case Sorting.ByStars:\r\n      icon = IconNames.SORT_NUMERICAL_DESC;\r\n      break;\r\n    case Sorting.ByUpdateDate:\r\n      icon = IconNames.SORT_DESC;\r\n      break;\r\n    default:\r\n      icon = IconNames.SORT_DESC;\r\n      break;\r\n  }\r\n  return icon;\r\n};\r\n\r\nconst paginateRepositories = (repositories: Repository[], pagination: Pagination): Repository[] => {\r\n  const { items_per_page, current_page } = pagination;\r\n  const pageLimit = items_per_page * current_page;\r\n  return repositories.slice(pageLimit - items_per_page, pageLimit);\r\n};\r\n\r\nexport { sortingDisplayText, sortingIconName, paginateRepositories };\r\n","import React from 'react';\r\nimport { Sorting } from '../../constants/Sorting';\r\nimport { MenuItem } from '@blueprintjs/core';\r\nimport { sortingDisplayText, sortingIconName } from './helpers';\r\n\r\ninterface SortingOptionProps {\r\n  sorting: Sorting;\r\n  handler: Function;\r\n}\r\n\r\nfunction SortingOption(props: SortingOptionProps) {\r\n  const { sorting, handler } = props;\r\n  return <MenuItem text={sortingDisplayText(sorting)} icon={sortingIconName(sorting)} onClick={handler(sorting)} />;\r\n}\r\n\r\nexport default SortingOption;\r\n","import React from 'react';\r\nimport { Sorting } from '../../constants/Sorting';\r\nimport { Menu } from '@blueprintjs/core';\r\nimport SortingOption from './SortingOption';\r\n\r\ninterface SortingOptionsProps {\r\n  handler: Function;\r\n}\r\n\r\nfunction SortingOptions(props: SortingOptionsProps) {\r\n  const { handler } = props;\r\n  return (\r\n    <Menu>\r\n      <SortingOption sorting={Sorting.Alphabetical} handler={handler} />\r\n      <SortingOption sorting={Sorting.ByStars} handler={handler} />\r\n      <SortingOption sorting={Sorting.ByUpdateDate} handler={handler} />\r\n    </Menu>\r\n  );\r\n}\r\n\r\nexport default SortingOptions;\r\n","import React from 'react';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { Tooltip, Position } from '@blueprintjs/core';\r\nimport IconItem from '../IconItem';\r\nimport { Repository } from '../../models/Repository';\r\n\r\ninterface RepositoryViewProps {\r\n  repository: Repository;\r\n}\r\n\r\nfunction RepositoryView(props: RepositoryViewProps) {\r\n  const { repository } = props;\r\n  return (\r\n    <div className=\"repository\">\r\n      <div className=\"repository-header\">\r\n        <IconItem\r\n          icon={repository.fork ? IconNames.GIT_BRANCH : IconNames.GIT_REPO}\r\n          text={repository.name}\r\n          link={repository.html_url}\r\n        />\r\n        {repository.language && (\r\n          <div className=\"repository-tag\">\r\n            <IconItem icon={IconNames.CODE} text={repository.language} />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <i>{repository.description}</i>\r\n      </div>\r\n      <div className=\"repository-footer\">\r\n        {repository.stargazers_count !== 0 && <IconItem icon={IconNames.STAR} text={repository.stargazers_count} />}\r\n        {repository.forks !== 0 && <IconItem icon={IconNames.GIT_BRANCH} text={repository.forks} />}\r\n        {repository.open_issues !== 0 && <IconItem icon={IconNames.ISSUE} text={repository.open_issues} />}\r\n        <div className=\"repository-footer-right\">\r\n          <Tooltip content={repository.updated_at} boundary=\"viewport\" position={Position.TOP}>\r\n            <IconItem icon={IconNames.UPDATED} text={new Date(repository.updated_at).toLocaleDateString()} />\r\n          </Tooltip>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RepositoryView;\r\n","import React from 'react';\r\nimport { ButtonGroup, Button } from '@blueprintjs/core';\r\nimport { Pagination } from '../../models/Pagination';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setPagination } from '../../actions/actionCreators';\r\n\r\ninterface PaginationProps {\r\n  pagination: Pagination;\r\n}\r\n\r\nfunction PaginationControls(props: PaginationProps) {\r\n  const { items_per_page, pages, current_page } = props.pagination;\r\n  const dispatch = useDispatch();\r\n\r\n  const changePageHandler = (page: number) => () => {\r\n    dispatch(setPagination({ items_per_page, pages, current_page: page }));\r\n  };\r\n\r\n  return (\r\n    <div id=\"pagination\">\r\n      <ButtonGroup>\r\n        <Button\r\n          icon={IconNames.DOUBLE_CHEVRON_LEFT}\r\n          disabled={current_page === 1}\r\n          onClick={changePageHandler(1)}\r\n        ></Button>\r\n        <Button\r\n          icon={IconNames.CHEVRON_LEFT}\r\n          disabled={current_page === 1}\r\n          onClick={changePageHandler(current_page - 1)}\r\n        ></Button>\r\n        {current_page > 1 && <Button onClick={changePageHandler(current_page - 1)}>{current_page - 1}</Button>}\r\n        <Button active={true}>{current_page}</Button>\r\n        {current_page < pages && <Button onClick={changePageHandler(current_page + 1)}>{current_page + 1}</Button>}\r\n        <Button\r\n          icon={IconNames.CHEVRON_RIGHT}\r\n          disabled={current_page === pages}\r\n          onClick={changePageHandler(current_page + 1)}\r\n        ></Button>\r\n        <Button\r\n          icon={IconNames.DOUBLE_CHEVRON_RIGHT}\r\n          disabled={current_page === pages}\r\n          onClick={changePageHandler(pages)}\r\n        ></Button>\r\n      </ButtonGroup>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PaginationControls;\r\n","import React, { useState } from 'react';\r\nimport { Card, Elevation, Button, HTMLTable, ButtonGroup, Popover, Position } from '@blueprintjs/core';\r\nimport { Repository } from '../../models/Repository';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Sorting } from '../../constants/Sorting';\r\nimport { changeSorting } from '../../actions/thunkActionCreators';\r\nimport { sortingDisplayText, sortingIconName, paginateRepositories } from './helpers';\r\nimport SortingOptions from './SortingOptions';\r\nimport RepositoryView from './RepositoryView';\r\nimport PaginationControls from './PaginationControls';\r\nimport { Pagination } from '../../models/Pagination';\r\n\r\ninterface RepositoryListProps {\r\n  repositories: Repository[];\r\n  sorting: Sorting;\r\n  pagination: Pagination;\r\n}\r\n\r\nfunction RepositoryList(props: RepositoryListProps) {\r\n  const { repositories, sorting, pagination } = props;\r\n  const dispatch = useDispatch();\r\n  const [viewMode, setViewMode] = useState('tiles');\r\n\r\n  const toggleViewMode = () => {\r\n    setViewMode(viewMode === 'tiles' ? 'table' : 'tiles');\r\n  };\r\n\r\n  const changeSortingHandler = (sorting: Sorting) => () => {\r\n    dispatch(changeSorting(sorting));\r\n  };\r\n\r\n  const paginatedRepositories = paginateRepositories(repositories, pagination);\r\n\r\n  return (\r\n    repositories.length > 0 && (\r\n      <Card id=\"repository-list\" elevation={Elevation.TWO}>\r\n        <div id=\"repository-list-header\" className=\"clearfix\">\r\n          <span id=\"repository-list-title\">Repositories</span>\r\n          <div id=\"repository-list-controls\">\r\n            <ButtonGroup>\r\n              <Popover\r\n                content={<SortingOptions handler={changeSortingHandler} />}\r\n                position={Position.BOTTOM}\r\n                usePortal={true}\r\n                portalContainer={document.body}\r\n              >\r\n                <Button\r\n                  text={'Sorting: ' + sortingDisplayText(sorting)}\r\n                  icon={sortingIconName(sorting)}\r\n                  rightIcon={IconNames.CARET_DOWN}\r\n                />\r\n              </Popover>\r\n              <Button\r\n                text={viewMode === 'tiles' ? 'View table' : 'View tiles'}\r\n                onClick={toggleViewMode}\r\n                icon={viewMode === 'tiles' ? IconNames.TH : IconNames.GRID_VIEW}\r\n              />\r\n            </ButtonGroup>\r\n          </div>\r\n        </div>\r\n        {viewMode === 'tiles' ? (\r\n          <div id=\"repository-list-cards-container\">\r\n            {paginatedRepositories.map((repository, index) => (\r\n              <RepositoryView repository={repository} key={index} />\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div id=\"repository-list-table-container\">\r\n            <HTMLTable bordered={true} striped={true}>\r\n              <thead>\r\n                <tr>\r\n                  <th>Repository</th>\r\n                  <th>Description</th>\r\n                  <th>Language</th>\r\n                  <th>Stars</th>\r\n                  <th>Forked</th>\r\n                  <th>Open Issues</th>\r\n                  <th>Last Updated</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {paginatedRepositories.map((repository, index) => (\r\n                  <tr key={index}>\r\n                    <td>\r\n                      <a href={repository.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        {repository.name}\r\n                      </a>\r\n                    </td>\r\n                    <td>{repository.description}</td>\r\n                    <td>{repository.language}</td>\r\n                    <td>{repository.stargazers_count}</td>\r\n                    <td>{repository.forks}</td>\r\n                    <td>{repository.open_issues}</td>\r\n                    <td>{new Date(repository.updated_at).toLocaleDateString()}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </HTMLTable>\r\n          </div>\r\n        )}\r\n        <PaginationControls pagination={pagination}></PaginationControls>\r\n      </Card>\r\n    )\r\n  );\r\n}\r\n\r\nexport default RepositoryList;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../models/AppState';\r\nimport UserProfile from './UserProfile';\r\nimport Statistics from './Statistics';\r\nimport RepositoryList from './repostory_list/RepositoryList';\r\nimport { NonIdealState, Card, Elevation, Spinner, Intent } from '@blueprintjs/core';\r\nimport { IconNames } from '@blueprintjs/icons';\r\n\r\nfunction Summary() {\r\n  const user = useSelector((state: AppState) => state.user);\r\n  const loading_state = useSelector((state: AppState) => state.loading_state);\r\n  const languageStatistics = useSelector((state: AppState) => state.language_statistics);\r\n  const starsStatistics = useSelector((state: AppState) => state.stars_statistics);\r\n  const repositories = useSelector((state: AppState) => state.repositories);\r\n  const sorting = useSelector((state: AppState) => state.sorting);\r\n  const pagination = useSelector((state: AppState) => state.pagination);\r\n  return user.login !== '' ? (\r\n    <>\r\n      <UserProfile user={user} />\r\n      {loading_state ? (\r\n        <Card elevation={Elevation.TWO}>\r\n          <Spinner intent={Intent.PRIMARY} />\r\n        </Card>\r\n      ) : (\r\n        <>\r\n          {repositories.length !== 0 ? (\r\n            <div>\r\n              <Statistics languageStatistics={languageStatistics} starsStatistics={starsStatistics} />\r\n              <RepositoryList repositories={repositories} sorting={sorting} pagination={pagination} />\r\n            </div>\r\n          ) : (\r\n            <NonIdealState\r\n              icon={IconNames.DISABLE}\r\n              title=\"No repositories.\"\r\n              description=\"The user has no public repositories.\"\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  ) : (\r\n    <NonIdealState\r\n      icon={IconNames.DISABLE}\r\n      title=\"No user selected.\"\r\n      description=\"Enter a Github user name in the search bar above!\"\r\n    />\r\n  );\r\n}\r\n\r\nexport default Summary;\r\n","import React, { useState } from 'react';\r\nimport { InputGroup, Intent, Tooltip, Button, AnchorButton } from '@blueprintjs/core';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from '../models/AppState';\r\nimport { searchUser } from '../actions/thunkActionCreators';\r\n\r\nfunction Navbar() {\r\n  const dispatch = useDispatch();\r\n  const [userName, setUserName] = useState('');\r\n  const currentUserName = useSelector((state: AppState) => state.user.login);\r\n\r\n  const searchHandler = () => {\r\n    if (userName !== '' && userName !== currentUserName) {\r\n      dispatch(searchUser(userName));\r\n    }\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    setUserName('');\r\n  };\r\n\r\n  return (\r\n    <div id=\"navbar\">\r\n      <div className=\"viewport\">\r\n        <div id=\"navbar-title\">Github Repo Summary</div>\r\n        <div>\r\n          <InputGroup\r\n            placeholder=\"Github user name\"\r\n            rightElement={\r\n              <>\r\n                <Tooltip content=\"Search\">\r\n                  <Button icon={IconNames.SEARCH} intent={Intent.PRIMARY} minimal={true} onClick={searchHandler} />\r\n                </Tooltip>\r\n                <Tooltip content=\"Clear\">\r\n                  <Button icon={IconNames.TRASH} intent={Intent.DANGER} minimal={true} onClick={resetHandler} />\r\n                </Tooltip>\r\n              </>\r\n            }\r\n            value={userName}\r\n            onChange={(event: { target: any }) => setUserName(event.target.value)}\r\n            onKeyPress={event => {\r\n              if (event.charCode === 13) {\r\n                searchHandler();\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n        <div id=\"navbar-right\">\r\n          <AnchorButton\r\n            icon=\"git-repo\"\r\n            text=\"Github\"\r\n            href=\"https://github.com/alex-c/github-repo-summary\"\r\n            target=\"_blank\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useState } from 'react';\r\nimport { Icon, TagInput, Tag, Intent, Tooltip, Button } from '@blueprintjs/core';\r\nimport { IconNames } from '@blueprintjs/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from '../models/AppState';\r\nimport { setFavorites } from '../actions/actionCreators';\r\nimport { removeUserFromFavorites, searchUser, addUserToFavoritesIfExists } from '../actions/thunkActionCreators';\r\n\r\nfunction Favorites() {\r\n  const favorites = useSelector((state: AppState) => state.favorites);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const loadFavoriteHandler = (name: string) => () => {\r\n    dispatch(searchUser(name));\r\n  };\r\n\r\n  const toggleEditModeHandler = () => {\r\n    setEditMode(!editMode);\r\n  };\r\n\r\n  const removeFavoriteHandler = (name: string) => {\r\n    if (favorites.length === 1 && favorites.map(f => f.name).includes(name)) {\r\n      setEditMode(false);\r\n    }\r\n    dispatch(removeUserFromFavorites({ name }));\r\n  };\r\n\r\n  const removeAllFavoritesHandler = () => {\r\n    setEditMode(false);\r\n    dispatch(setFavorites([]));\r\n  };\r\n\r\n  const addFavoriteHandler = (values: string[]) => {\r\n    const newUser = values.shift();\r\n    if (newUser) {\r\n      dispatch(addUserToFavoritesIfExists(newUser));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {favorites.length > 0 && (\r\n        <div id=\"favorites\">\r\n          {editMode ? (\r\n            <TagInput\r\n              leftIcon={IconNames.STAR}\r\n              values={favorites.map(favorite => favorite.name)}\r\n              onRemove={removeFavoriteHandler}\r\n              onAdd={addFavoriteHandler}\r\n              addOnPaste={true}\r\n              rightElement={\r\n                <>\r\n                  <Tooltip content=\"Remove all\">\r\n                    <Button\r\n                      icon={IconNames.TRASH}\r\n                      intent={Intent.DANGER}\r\n                      minimal={true}\r\n                      onClick={removeAllFavoritesHandler}\r\n                    />\r\n                  </Tooltip>\r\n                  <Tooltip content=\"Done editing\">\r\n                    <Button\r\n                      icon={IconNames.TICK}\r\n                      intent={Intent.SUCCESS}\r\n                      minimal={true}\r\n                      onClick={toggleEditModeHandler}\r\n                    />\r\n                  </Tooltip>\r\n                </>\r\n              }\r\n            />\r\n          ) : (\r\n            <>\r\n              <div id=\"favorites-controls\">\r\n                <Tooltip content=\"Edit\">\r\n                  <Icon icon={IconNames.EDIT} onClick={toggleEditModeHandler} />\r\n                </Tooltip>\r\n              </div>\r\n              {favorites.map((favorite, index) => (\r\n                <Tag\r\n                  intent={Intent.PRIMARY}\r\n                  minimal={true}\r\n                  interactive={true}\r\n                  key={index}\r\n                  onClick={loadFavoriteHandler(favorite.name)}\r\n                >\r\n                  {favorite.name}\r\n                </Tag>\r\n              ))}\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Favorites;\r\n","import React from 'react';\r\nimport Summary from './Summary';\r\nimport Navbar from './Navbar';\r\nimport Favorites from './Favorites';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <main className=\"viewport\">\r\n        <Favorites />\r\n        <Summary />\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// Import Redux\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducer';\r\n\r\n// Import Blueprint\r\nimport { FocusStyleManager } from '@blueprintjs/core';\r\n\r\n// Set up App\r\nimport App from './components/App';\r\nimport './index.scss';\r\nimport localStorageKeys from './constants/LocalStorageKeys';\r\nimport { Sorting } from './constants/Sorting';\r\n\r\n// Set up Blueprint\r\nFocusStyleManager.onlyShowFocusOnTabs();\r\n\r\n// Set up store\r\nconst initialState = {\r\n  user: {\r\n    login: '',\r\n  },\r\n  favorites: JSON.parse(localStorage.getItem(localStorageKeys.favorites)) || [],\r\n  loading_state: false,\r\n  language_statistics: null,\r\n  stars_statistics: null,\r\n  repositories: [],\r\n  sorting: Sorting.Alphabetical,\r\n  pagination: {\r\n    items_per_page: 25,\r\n    pages: 1,\r\n    current_page: 1,\r\n  },\r\n};\r\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk));\r\n\r\n// Render!\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}